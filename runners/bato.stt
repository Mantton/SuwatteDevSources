(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.STTPackage = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllGenreTags = exports.SORTERS = exports.LANG_TAGS = exports.ORIGIN_TAGS = exports.STATUS_TAGS = exports.GENERIC_TAGS = exports.ADULT_TAGS = exports.DEMOGRAPHIC_TAGS = exports.CONTENT_TYPE_TAGS = void 0;
exports.CONTENT_TYPE_TAGS = [
    { id: "artbook", label: "Artbook", adultContent: false },
    { id: "cartoon", label: "Cartoon", adultContent: false },
    { id: "comic", label: "Comic", adultContent: false },
    { id: "doujinshi", label: "Doujinshi", adultContent: false },
    { id: "imageset", label: "Imageset", adultContent: false },
    { id: "manga", label: "Manga", adultContent: false },
    { id: "manhua", label: "Manhua", adultContent: false },
    { id: "manhwa", label: "Manhwa", adultContent: false },
    { id: "webtoon", label: "Webtoon", adultContent: false },
    { id: "western", label: "Western", adultContent: false },
];
exports.DEMOGRAPHIC_TAGS = [
    { id: "shoujo", label: "Shoujo(G)", adultContent: false },
    { id: "shounen", label: "Shounen(B)", adultContent: false },
    { id: "josei", label: "Josei(W)", adultContent: false },
    { id: "seinen", label: "Seinen(M)", adultContent: false },
    { id: "yuri", label: "Yuri(GL)", adultContent: false },
    { id: "yaoi", label: "Yaoi(BL)", adultContent: false },
    { id: "futa", label: "Futa(WL)", adultContent: true },
    { id: "bara", label: "Bara(ML)", adultContent: true },
];
exports.ADULT_TAGS = [
    { id: "gore", label: "Gore", adultContent: true },
    { id: "bloody", label: "Bloody", adultContent: true },
    { id: "violence", label: "Violence", adultContent: true },
    { id: "ecchi", label: "Ecchi", adultContent: true },
    { id: "adult", label: "Adult", adultContent: true },
    { id: "mature", label: "Mature", adultContent: true },
    { id: "smut", label: "Smut", adultContent: true },
    { id: "hentai", label: "Hentai", adultContent: true },
];
exports.GENERIC_TAGS = [
    { id: "_4_koma", label: "4-Koma", adultContent: false },
    { id: "action", label: "Action", adultContent: false },
    { id: "adaptation", label: "Adaptation", adultContent: false },
    { id: "adventure", label: "Adventure", adultContent: false },
    { id: "age_gap", label: "Age Gap", adultContent: false },
    { id: "aliens", label: "Aliens", adultContent: false },
    { id: "animals", label: "Animals", adultContent: false },
    { id: "anthology", label: "Anthology", adultContent: false },
    { id: "beasts", label: "Beasts", adultContent: false },
    { id: "bodyswap", label: "Bodyswap", adultContent: false },
    { id: "cars", label: "Cars", adultContent: false },
    {
        id: "cheating_infidelity",
        label: "Cheating/Infidelity",
        adultContent: false,
    },
    {
        id: "childhood_friends",
        label: "Childhood Friends",
        adultContent: false,
    },
    { id: "college_life", label: "College life ", adultContent: false },
    { id: "comedy", label: "Comedy", adultContent: false },
    {
        id: "contest_winning",
        label: "Contest winning",
        adultContent: false,
    },
    { id: "cooking", label: "Cooking", adultContent: false },
    { id: "crime", label: "Crime", adultContent: false },
    { id: "crossdressing", label: "Crossdressing", adultContent: false },
    { id: "delinquents", label: "Delinquents", adultContent: false },
    { id: "dementia", label: "Dementia", adultContent: false },
    { id: "demons", label: "Demons", adultContent: false },
    { id: "drama", label: "Drama", adultContent: false },
    { id: "dungeons", label: "Dungeons", adultContent: false },
    {
        id: "emperor_daughte",
        label: "Emperor's daughte",
        adultContent: false,
    },
    { id: "fantasy", label: "Fantasy", adultContent: false },
    { id: "fan_colored", label: "Fan-Colored", adultContent: false },
    { id: "fetish", label: "Fetish", adultContent: false },
    { id: "full_color", label: "Full Color", adultContent: false },
    { id: "game", label: "Game", adultContent: false },
    { id: "gender_bender", label: "Gender Bender", adultContent: false },
    { id: "genderswap", label: "Genderswap", adultContent: false },
    { id: "ghosts", label: "Ghosts", adultContent: false },
    { id: "gyaru", label: "Gyaru", adultContent: false },
    { id: "harem", label: "Harem", adultContent: false },
    { id: "harlequin", label: "Harlequin", adultContent: false },
    { id: "historical", label: "Historical", adultContent: false },
    { id: "horror", label: "Horror", adultContent: false },
    { id: "incest", label: "Incest", adultContent: false },
    { id: "isekai", label: "Isekai", adultContent: false },
    { id: "kids", label: "Kids", adultContent: false },
    { id: "loli", label: "Loli", adultContent: false },
    { id: "magic", label: "Magic", adultContent: false },
    { id: "magical_girls", label: "Magical Girls", adultContent: false },
    { id: "martial_arts", label: "Martial Arts", adultContent: false },
    { id: "mecha", label: "Mecha", adultContent: false },
    { id: "medical", label: "Medical", adultContent: false },
    { id: "military", label: "Military", adultContent: false },
    { id: "monster_girls", label: "Monster Girls", adultContent: false },
    { id: "monsters", label: "Monsters", adultContent: false },
    { id: "music", label: "Music", adultContent: false },
    { id: "mystery", label: "Mystery", adultContent: false },
    { id: "netorare", label: "Netorare/NTR", adultContent: false },
    { id: "ninja", label: "Ninja", adultContent: false },
    { id: "office_workers", label: "Office Workers", adultContent: false },
    { id: "omegaverse", label: "Omegaverse", adultContent: false },
    { id: "oneshot", label: "Oneshot", adultContent: false },
    { id: "parody", label: "parody", adultContent: false },
    { id: "philosophical", label: "Philosophical", adultContent: false },
    { id: "police", label: "Police", adultContent: false },
    {
        id: "post_apocalyptic",
        label: "Post-Apocalyptic",
        adultContent: false,
    },
    { id: "psychological", label: "Psychological", adultContent: false },
    { id: "regression", label: "Regression", adultContent: false },
    { id: "reincarnation", label: "Reincarnation", adultContent: false },
    { id: "reverse_harem", label: "Reverse Harem", adultContent: false },
    { id: "revenge", label: "Revenge", adultContent: false },
    { id: "reverse_isekai", label: "Reverse Isekai ", adultContent: false },
    { id: "romance", label: "Romance", adultContent: false },
    { id: "royal_family", label: "Royal family", adultContent: false },
    { id: "royalty", label: "Royalty", adultContent: false },
    { id: "samurai", label: "Samurai", adultContent: false },
    { id: "school_life", label: "School Life", adultContent: false },
    { id: "sci_fi", label: "Sci-Fi", adultContent: false },
    { id: "shota", label: "Shota", adultContent: false },
    { id: "shoujo_ai", label: "Shoujo ai", adultContent: false },
    { id: "shounen_ai", label: "Shounen ai", adultContent: false },
    { id: "showbiz", label: "Showbiz", adultContent: false },
    { id: "slice_of_life", label: "Slice of Life", adultContent: false },
    { id: "sm_bdsm", label: "SM/BDSM/SUB-DOM", adultContent: false },
    { id: "space", label: "Space", adultContent: false },
    { id: "sports", label: "Sports", adultContent: false },
    { id: "super_power", label: "Super Power", adultContent: false },
    { id: "superhero", label: "Superhero", adultContent: false },
    { id: "supernatural", label: "Supernatural", adultContent: false },
    { id: "survival", label: "Survival", adultContent: false },
    { id: "thriller", label: "Thriller", adultContent: false },
    { id: "time_travel", label: "Time Travel", adultContent: false },
    { id: "tower_climbing", label: "Tower Climbing", adultContent: false },
    {
        id: "traditional_games",
        label: "Traditional Games",
        adultContent: false,
    },
    { id: "tragedy", label: "Tragedy", adultContent: false },
    { id: "transmigration", label: "Transmigration", adultContent: false },
    { id: "vampires", label: "Vampires", adultContent: false },
    { id: "villainess", label: "Villainess", adultContent: false },
    { id: "video_games", label: "Video Games", adultContent: false },
    {
        id: "virtual_reality",
        label: "Virtual Reality",
        adultContent: false,
    },
    { id: "wuxia", label: "Wuxia", adultContent: false },
    { id: "xianxia", label: "Xianxia", adultContent: false },
    { id: "xuanhuan", label: "Xuanhuan", adultContent: false },
    { id: "yakuzas", label: "Yakuzas", adultContent: false },
    { id: "zombies", label: "Zombies", adultContent: false },
];
exports.STATUS_TAGS = [
    { id: "pending", label: "Pending", adultContent: false },
    { id: "ongoing", label: "Ongoing", adultContent: false },
    { id: "completed", label: "Completed", adultContent: false },
    { id: "hiatus", label: "Hiatus", adultContent: false },
    { id: "cancelled", label: "Cancelled", adultContent: false },
];
exports.ORIGIN_TAGS = [
    { id: "zh", label: "Chinese", adultContent: false },
    { id: "en", label: "English", adultContent: false },
    { id: "ja", label: "Japanese", adultContent: false },
    { id: "ko", label: "Korean", adultContent: false },
    { id: "af", label: "Afrikaans", adultContent: false },
    { id: "sq", label: "Albanian", adultContent: false },
    { id: "am", label: "Amharic", adultContent: false },
    { id: "ar", label: "Arabic", adultContent: false },
    { id: "hy", label: "Armenian", adultContent: false },
    { id: "az", label: "Azerbaijani", adultContent: false },
    { id: "be", label: "Belarusian", adultContent: false },
    { id: "bn", label: "Bengali", adultContent: false },
    { id: "bs", label: "Bosnian", adultContent: false },
    { id: "bg", label: "Bulgarian", adultContent: false },
    { id: "my", label: "Burmese", adultContent: false },
    { id: "km", label: "Cambodian", adultContent: false },
    { id: "ca", label: "Catalan", adultContent: false },
    { id: "ceb", label: "Cebuano", adultContent: false },
    { id: "zh_hk", label: "Chinese (Cantonese)", adultContent: false },
    { id: "zh_tw", label: "Chinese (Traditional)", adultContent: false },
    { id: "hr", label: "Croatian", adultContent: false },
    { id: "cs", label: "Czech", adultContent: false },
    { id: "da", label: "Danish", adultContent: false },
    { id: "nl", label: "Dutch", adultContent: false },
    { id: "en_us", label: "English (United States)", adultContent: false },
    { id: "eo", label: "Esperanto", adultContent: false },
    { id: "et", label: "Estonian", adultContent: false },
    { id: "fo", label: "Faroese", adultContent: false },
    { id: "fil", label: "Filipino", adultContent: false },
    { id: "fi", label: "Finnish", adultContent: false },
    { id: "fr", label: "French", adultContent: false },
    { id: "ka", label: "Georgian", adultContent: false },
    { id: "de", label: "German", adultContent: false },
    { id: "el", label: "Greek", adultContent: false },
    { id: "gn", label: "Guarani", adultContent: false },
    { id: "gu", label: "Gujarati", adultContent: false },
    { id: "ht", label: "Haitian Creole", adultContent: false },
    { id: "ha", label: "Hausa", adultContent: false },
    { id: "he", label: "Hebrew", adultContent: false },
    { id: "hi", label: "Hindi", adultContent: false },
    { id: "hu", label: "Hungarian", adultContent: false },
    { id: "is", label: "Icelandic", adultContent: false },
    { id: "ig", label: "Igbo", adultContent: false },
    { id: "id", label: "Indonesian", adultContent: false },
    { id: "ga", label: "Irish", adultContent: false },
    { id: "it", label: "Italian", adultContent: false },
    { id: "jv", label: "Javanese", adultContent: false },
    { id: "kn", label: "Kannada", adultContent: false },
    { id: "kk", label: "Kazakh", adultContent: false },
    { id: "ku", label: "Kurdish", adultContent: false },
    { id: "ky", label: "Kyrgyz", adultContent: false },
    { id: "lo", label: "Laothian", adultContent: false },
    { id: "lv", label: "Latvian", adultContent: false },
    { id: "lt", label: "Lithuanian", adultContent: false },
    { id: "lb", label: "Luxembourgish", adultContent: false },
    { id: "mk", label: "Macedonian", adultContent: false },
    { id: "mg", label: "Malagasy", adultContent: false },
    { id: "ms", label: "Malay", adultContent: false },
    { id: "ml", label: "Malayalam", adultContent: false },
    { id: "mt", label: "Maltese", adultContent: false },
    { id: "mi", label: "Maori", adultContent: false },
    { id: "mr", label: "Marathi", adultContent: false },
    { id: "mo", label: "Moldavian", adultContent: false },
    { id: "mn", label: "Mongolian", adultContent: false },
    { id: "ne", label: "Nepali", adultContent: false },
    { id: "no", label: "Norwegian", adultContent: false },
    { id: "ny", label: "Nyanja", adultContent: false },
    { id: "ps", label: "Pashto", adultContent: false },
    { id: "fa", label: "Persian", adultContent: false },
    { id: "pl", label: "Polish", adultContent: false },
    { id: "pt", label: "Portuguese", adultContent: false },
    { id: "pt_br", label: "Portuguese (Brazil)", adultContent: false },
    { id: "ro", label: "Romanian", adultContent: false },
    { id: "rm", label: "Romansh", adultContent: false },
    { id: "ru", label: "Russian", adultContent: false },
    { id: "sm", label: "Samoan", adultContent: false },
    { id: "sr", label: "Serbian", adultContent: false },
    { id: "sh", label: "Serbo-Croatian", adultContent: false },
    { id: "st", label: "Sesotho", adultContent: false },
    { id: "sn", label: "Shona", adultContent: false },
    { id: "sd", label: "Sindhi", adultContent: false },
    { id: "si", label: "Sinhalese", adultContent: false },
    { id: "sk", label: "Slovak", adultContent: false },
    { id: "sl", label: "Slovenian", adultContent: false },
    { id: "so", label: "Somali", adultContent: false },
    { id: "es", label: "Spanish", adultContent: false },
    {
        id: "es_419",
        label: "Spanish (Latin America)",
        adultContent: false,
    },
    { id: "sw", label: "Swahili", adultContent: false },
    { id: "sv", label: "Swedish", adultContent: false },
    { id: "tg", label: "Tajik", adultContent: false },
    { id: "ta", label: "Tamil", adultContent: false },
    { id: "th", label: "Thai", adultContent: false },
    { id: "ti", label: "Tigrinya", adultContent: false },
    { id: "to", label: "Tonga", adultContent: false },
    { id: "tr", label: "Turkish", adultContent: false },
    { id: "tk", label: "Turkmen", adultContent: false },
    { id: "uk", label: "Ukrainian", adultContent: false },
    { id: "ur", label: "Urdu", adultContent: false },
    { id: "uz", label: "Uzbek", adultContent: false },
    { id: "vi", label: "Vietnamese", adultContent: false },
    { id: "yo", label: "Yoruba", adultContent: false },
    { id: "zu", label: "Zulu", adultContent: false },
    { id: "_t", label: "Other", adultContent: false },
];
exports.LANG_TAGS = [
    { id: "en", label: "English", adultContent: false },
    { id: "ar", label: "Arabic", adultContent: false },
    { id: "bg", label: "Bulgarian", adultContent: false },
    { id: "zh", label: "Chinese", adultContent: false },
    { id: "cs", label: "Czech", adultContent: false },
    { id: "da", label: "Danish", adultContent: false },
    { id: "nl", label: "Dutch", adultContent: false },
    { id: "fil", label: "Filipino", adultContent: false },
    { id: "fi", label: "Finnish", adultContent: false },
    { id: "fr", label: "French", adultContent: false },
    { id: "de", label: "German", adultContent: false },
    { id: "el", label: "Greek", adultContent: false },
    { id: "he", label: "Hebrew", adultContent: false },
    { id: "hi", label: "Hindi", adultContent: false },
    { id: "hu", label: "Hungarian", adultContent: false },
    { id: "id", label: "Indonesian", adultContent: false },
    { id: "it", label: "Italian", adultContent: false },
    { id: "ja", label: "Japanese", adultContent: false },
    { id: "ko", label: "Korean", adultContent: false },
    { id: "ms", label: "Malay", adultContent: false },
    { id: "pl", label: "Polish", adultContent: false },
    { id: "pt", label: "Portuguese", adultContent: false },
    { id: "pt_br", label: "Portuguese (Brazil)", adultContent: false },
    { id: "ro", label: "Romanian", adultContent: false },
    { id: "ru", label: "Russian", adultContent: false },
    { id: "es", label: "Spanish", adultContent: false },
    { id: "es_419", label: "Spanish (Latin America)", adultContent: false },
    { id: "sv", label: "Swedish", adultContent: false },
    { id: "th", label: "Thai", adultContent: false },
    { id: "tr", label: "Turkish", adultContent: false },
    { id: "uk", label: "Ukrainian", adultContent: false },
    { id: "vi", label: "Vietnamese", adultContent: false },
    { id: "af", label: "Afrikaans", adultContent: false },
    { id: "sq", label: "Albanian", adultContent: false },
    { id: "am", label: "Amharic", adultContent: false },
    { id: "hy", label: "Armenian", adultContent: false },
    { id: "az", label: "Azerbaijani", adultContent: false },
    { id: "be", label: "Belarusian", adultContent: false },
    { id: "bn", label: "Bengali", adultContent: false },
    { id: "bs", label: "Bosnian", adultContent: false },
    { id: "my", label: "Burmese", adultContent: false },
    { id: "km", label: "Cambodian", adultContent: false },
    { id: "ca", label: "Catalan", adultContent: false },
    { id: "ceb", label: "Cebuano", adultContent: false },
    { id: "zh_hk", label: "Chinese (Cantonese)", adultContent: false },
    { id: "zh_tw", label: "Chinese (Traditional)", adultContent: false },
    { id: "hr", label: "Croatian", adultContent: false },
    { id: "en_us", label: "English (United States)", adultContent: false },
    { id: "eo", label: "Esperanto", adultContent: false },
    { id: "et", label: "Estonian", adultContent: false },
    { id: "fo", label: "Faroese", adultContent: false },
    { id: "ka", label: "Georgian", adultContent: false },
    { id: "gn", label: "Guarani", adultContent: false },
    { id: "gu", label: "Gujarati", adultContent: false },
    { id: "ht", label: "Haitian Creole", adultContent: false },
    { id: "ha", label: "Hausa", adultContent: false },
    { id: "is", label: "Icelandic", adultContent: false },
    { id: "ig", label: "Igbo", adultContent: false },
    { id: "ga", label: "Irish", adultContent: false },
    { id: "jv", label: "Javanese", adultContent: false },
    { id: "kn", label: "Kannada", adultContent: false },
    { id: "kk", label: "Kazakh", adultContent: false },
    { id: "ku", label: "Kurdish", adultContent: false },
    { id: "ky", label: "Kyrgyz", adultContent: false },
    { id: "lo", label: "Laothian", adultContent: false },
    { id: "lv", label: "Latvian", adultContent: false },
    { id: "lt", label: "Lithuanian", adultContent: false },
    { id: "lb", label: "Luxembourgish", adultContent: false },
    { id: "mk", label: "Macedonian", adultContent: false },
    { id: "mg", label: "Malagasy", adultContent: false },
    { id: "ml", label: "Malayalam", adultContent: false },
    { id: "mt", label: "Maltese", adultContent: false },
    { id: "mi", label: "Maori", adultContent: false },
    { id: "mr", label: "Marathi", adultContent: false },
    { id: "mo", label: "Moldavian", adultContent: false },
    { id: "mn", label: "Mongolian", adultContent: false },
    { id: "ne", label: "Nepali", adultContent: false },
    { id: "no", label: "Norwegian", adultContent: false },
    { id: "ny", label: "Nyanja", adultContent: false },
    { id: "ps", label: "Pashto", adultContent: false },
    { id: "fa", label: "Persian", adultContent: false },
    { id: "rm", label: "Romansh", adultContent: false },
    { id: "sm", label: "Samoan", adultContent: false },
    { id: "sr", label: "Serbian", adultContent: false },
    { id: "sh", label: "Serbo-Croatian", adultContent: false },
    { id: "st", label: "Sesotho", adultContent: false },
    { id: "sn", label: "Shona", adultContent: false },
    { id: "sd", label: "Sindhi", adultContent: false },
    { id: "si", label: "Sinhalese", adultContent: false },
    { id: "sk", label: "Slovak", adultContent: false },
    { id: "sl", label: "Slovenian", adultContent: false },
    { id: "so", label: "Somali", adultContent: false },
    { id: "sw", label: "Swahili", adultContent: false },
    { id: "tg", label: "Tajik", adultContent: false },
    { id: "ta", label: "Tamil", adultContent: false },
    { id: "ti", label: "Tigrinya", adultContent: false },
    { id: "to", label: "Tonga", adultContent: false },
    { id: "tk", label: "Turkmen", adultContent: false },
    { id: "ur", label: "Urdu", adultContent: false },
    { id: "uz", label: "Uzbek", adultContent: false },
    { id: "yo", label: "Yoruba", adultContent: false },
    { id: "zu", label: "Zulu", adultContent: false },
    { id: "_t", label: "Other", adultContent: false },
];
exports.SORTERS = [
    { label: "Most Views Totally", id: "views_a" },
    { label: "Most Views 365 days", id: "views_y" },
    { label: "Most Views 30 days", id: "views_m" },
    { label: "Most Views 7 days", id: "views_w" },
    { label: "Most Views 24 hours", id: "views_d" },
    { label: "Most Views 60 minutes", id: "views_h" },
    { label: "Z-A", id: "title" },
    { label: "Last Updated", id: "update" },
    { label: "Newest Added", id: "create" },
];
const getAllGenreTags = () => {
    return [
        ...exports.GENERIC_TAGS,
        ...exports.ADULT_TAGS,
        ...exports.CONTENT_TYPE_TAGS,
        ...exports.DEMOGRAPHIC_TAGS,
    ];
};
exports.getAllGenreTags = getAllGenreTags;

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Controller = void 0;
const daisuke_1 = require("@suwatte/daisuke");
const constants_1 = require("./constants");
const parser_1 = require("./parser");
class Controller {
    TAG_DIVIDER = ":";
    BASE = "https://bato.to";
    client = new NetworkClient();
    parser = new parser_1.Parser();
    store = new ObjectStore();
    async getSearchResults(query) {
        const params = {};
        // Keyword
        if (query.query) {
            params["word"] = query.query;
        }
        // Page
        if (query.page) {
            params["page"] = query.page;
        }
        const includedTags = [];
        const excludedTags = [];
        for (const filter of query.filters ?? []) {
            switch (filter.id) {
                case "creators":
                    if (!filter.included || !filter.included[0] || params.word)
                        break;
                    params.word = filter.included[0];
                    break;
                case "origin":
                    params.origs = this.prepareFilterString(filter.included ?? [], filter.excluded ?? []);
                    break;
                case "translated":
                    params.lang = this.prepareFilterString(filter.included ?? [], filter.excluded ?? []);
                    if (!params.lang) {
                        const values = (await this.store.get("content_search_langs")) ?? ["en"];
                        if (values) {
                            const langs = values;
                            params.lang = this.prepareFilterString(langs, []);
                        }
                    }
                    break;
                case "status":
                    if (!filter.included)
                        break;
                    params.release = this.prepareFilterString(filter.included, []);
                    break;
                default:
                    if (filter.included)
                        includedTags.push(...filter.included);
                    if (filter.excluded)
                        excludedTags.push(...filter.excluded);
                    break;
            }
        }
        params.sort = query.sort ?? "";
        const response = await this.client.get(`${this.BASE}/browse`, {
            params,
        });
        const results = this.parser.parsePagedResponse(response.data);
        return { page: query.page ?? 1, results, isLastPage: results.length > 60 };
    }
    prepareFilterString(included, excluded) {
        let str = included.join(",");
        if (excluded.length !== 0) {
            str += "|";
            str += excluded.join(",");
        }
        return str;
    }
    getFilters() {
        return [
            {
                id: "content_type",
                title: "Content Type",
                type: daisuke_1.FilterType.EXCLUDABLE_MULTISELECT,
                options: constants_1.CONTENT_TYPE_TAGS,
            },
            {
                id: "demographic",
                title: "Demographics",
                type: daisuke_1.FilterType.EXCLUDABLE_MULTISELECT,
                options: constants_1.DEMOGRAPHIC_TAGS,
            },
            {
                id: "adult",
                title: "Mature",
                type: daisuke_1.FilterType.EXCLUDABLE_MULTISELECT,
                options: constants_1.ADULT_TAGS,
            },
            {
                id: "general",
                title: "Genres",
                type: daisuke_1.FilterType.EXCLUDABLE_MULTISELECT,
                options: constants_1.GENERIC_TAGS,
            },
            {
                id: "origin",
                title: "Original Language",
                type: daisuke_1.FilterType.SELECT,
                options: constants_1.ORIGIN_TAGS,
            },
            {
                id: "translated",
                title: "Translated Language",
                subtitle: "NOTE: When Selected, This will override your language preferences",
                type: daisuke_1.FilterType.SELECT,
                options: constants_1.LANG_TAGS,
            },
            {
                id: "status",
                title: "Content Status",
                type: daisuke_1.FilterType.SELECT,
                options: constants_1.STATUS_TAGS,
            },
        ];
    }
    getProperties() {
        return [
            {
                id: "content_type",
                label: "Content Type",
                tags: constants_1.CONTENT_TYPE_TAGS,
            },
            {
                id: "demographic",
                label: "Demographics",
                tags: constants_1.DEMOGRAPHIC_TAGS,
            },
            {
                id: "adult",
                label: "Mature",
                tags: constants_1.ADULT_TAGS,
            },
            {
                id: "general",
                label: "Genres",
                tags: constants_1.GENERIC_TAGS,
            },
            {
                id: "origin",
                label: "Original Language",
                tags: constants_1.ORIGIN_TAGS,
            },
            {
                id: "translated",
                label: "Translated Language",
                tags: constants_1.LANG_TAGS,
            },
            {
                id: "status",
                label: "Content Status",
                tags: constants_1.STATUS_TAGS,
            },
        ];
    }
    async getContent(id) {
        const response = await this.client.get(`${this.BASE}/series/${id}`);
        return this.parser.parseContent(response.data, id);
    }
    async getChapters(id) {
        const response = await this.client.get(`${this.BASE}/series/${id}`);
        return this.parser.parseChapters(response.data, id);
    }
    async getChapterData(contentId, chapterId) {
        const response = await this.client.get(`${this.BASE}/chapter/${chapterId}`);
        return {
            contentId,
            chapterId,
            pages: this.parser.parsePages(response.data),
        };
    }
}
exports.Controller = Controller;

},{"./constants":1,"./parser":4,"@suwatte/daisuke":7}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Target = void 0;
const daisuke_1 = require("@suwatte/daisuke");
const constants_1 = require("./constants");
const controller_1 = require("./controller");
class Target extends daisuke_1.Source {
    info = {
        id: "to.bato",
        name: "Bato",
        version: 0.3,
        website: "https://bato.to",
        supportedLanguages: [],
        nsfw: false,
        thumbnail: "bato.png",
        minSupportedAppVersion: "5.0",
    };
    controller = new controller_1.Controller();
    getContent(contentId) {
        return this.controller.getContent(contentId);
    }
    getChapters(contentId) {
        return this.controller.getChapters(contentId);
    }
    getChapterData(contentId, chapterId) {
        return this.controller.getChapterData(contentId, chapterId);
    }
    getSearchResults(query) {
        return this.controller.getSearchResults(query);
    }
    async getSourceTags() {
        return this.controller.getProperties();
    }
    async getSearchFilters() {
        return this.controller.getFilters();
    }
    async getSearchSorters() {
        return constants_1.SORTERS;
    }
    async getUserPreferences() {
        const store = new ObjectStore();
        return [
            {
                id: "language",
                children: [
                    new daisuke_1.MultiSelectPreference({
                        label: "Languages",
                        key: "n_content_search_langs",
                        options: constants_1.LANG_TAGS.map((v) => ({ label: v.label, value: v.id })),
                        value: {
                            get: async () => {
                                return ((await store.get("n_content_search_langs")) ?? ["en"]);
                            },
                            set: async (v) => {
                                return await store.set("n_content_search_langs", v);
                            },
                        },
                    }),
                ],
            },
        ];
    }
}
exports.Target = Target;

},{"./constants":1,"./controller":2,"@suwatte/daisuke":7}],4:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
const daisuke_1 = require("@suwatte/daisuke");
const cheerio_1 = require("cheerio");
const he_1 = require("he");
const moment_1 = __importDefault(require("moment"));
const constants_1 = require("./constants");
const crypto_js_1 = require("crypto-js");
class Parser {
    parsePagedResponse(html) {
        const ITEMS_SELECTOR = "div#series-list div.col";
        const $ = (0, cheerio_1.load)(html);
        const items = $(ITEMS_SELECTOR).toArray();
        const parseElement = (element) => {
            const item = $("a.item-cover", element);
            const imgElem = $("img", item);
            const cover = imgElem.attr("abs:src") ??
                imgElem.attr("src") ??
                imgElem.attr("data-src");
            const title = (0, he_1.decode)($("a.item-title", element).text().trim());
            const contentId = item
                .attr("href")
                ?.trim()
                .match(/series\/(\d+)/)?.[1];
            if (!title || !cover || !contentId)
                throw "Failed to Parse";
            return { contentId, cover, title };
        };
        const highlights = items.map(parseElement);
        return highlights;
    }
    parseContent(html, contentId) {
        const $ = (0, cheerio_1.load)(html);
        const infoElement = $("div#mainer div.container-fluid");
        const textFromInfo = (str) => {
            return $(`div.attr-item:contains(${str}) span`, infoElement)
                .text()
                .trim();
        };
        const workStatus = textFromInfo("Original work");
        const uploadStatus = textFromInfo("Upload status");
        const title = (0, he_1.decode)($("h3", infoElement).text().trim());
        const author = textFromInfo("Authors:");
        const artist = textFromInfo("Artists:");
        const summary = ($("div.limit-html", infoElement).text() +
            "\n" +
            $(".episode-list > .alert-warning").text().trim()).trim();
        const imgElem = $("div.attr-cover img");
        const cover = imgElem.attr("abs:src") ?? imgElem.attr("src") ?? "";
        let status = daisuke_1.Status.UNKNOWN;
        if (workStatus) {
            if (workStatus.includes("Ongoing"))
                status = daisuke_1.Status.ONGOING;
            if (workStatus.includes("Cancelled"))
                status = daisuke_1.Status.CANCELLED;
            if (workStatus.includes("Hiatus"))
                status = daisuke_1.Status.HIATUS;
            if (workStatus.includes("Completed")) {
                if (uploadStatus?.includes("Ongoing"))
                    status = daisuke_1.Status.ONGOING;
                else
                    status = daisuke_1.Status.COMPLETED;
            }
        }
        // TODO: Rank
        // Reading Mode
        const direction = textFromInfo("Read direction");
        let recommendedReadingMode = daisuke_1.ReadingMode.PAGED_MANGA;
        if (direction === "Top to Bottom")
            recommendedReadingMode = daisuke_1.ReadingMode.VERTICAL;
        else if (direction === "Left to Right")
            recommendedReadingMode = daisuke_1.ReadingMode.PAGED_COMIC;
        // Genres
        const selected = textFromInfo("Genres:")
            ?.split(", ")
            .map((v) => v.trim());
        const tags = (0, constants_1.getAllGenreTags)().filter((v) => selected.includes(v.label));
        const adultContent = tags.some((v) => v.adultContent);
        const properties = [];
        properties.push({
            id: "genres",
            label: "Genres",
            tags,
        });
        // Creators
        properties.push({
            id: "creators",
            label: "Credits",
            tags: [artist, author].map((v) => ({
                id: (0, he_1.encode)(v),
                label: v,
                adultContent: false,
            })),
        });
        const chapters = this.parseChapters(html, contentId);
        return {
            contentId,
            title,
            cover,
            summary,
            status,
            creators: [author, artist],
            recommendedReadingMode,
            properties,
            adultContent,
            chapters,
            webUrl: `https://bato.to/series/${contentId}`,
        };
    }
    parseChapters(html, contentId) {
        const $ = (0, cheerio_1.load)(html);
        const listSelector = $("div.main div.p-2").toArray();
        const chapters = [];
        let index = 0;
        for (const element of listSelector) {
            const urlElement = $("a.chapt", element);
            const chapterId = $(urlElement).attr("href")?.trim().split("/").pop();
            if (!chapterId)
                continue;
            const group = $("div.extra > a:not(.ps-3)", element).first();
            const time = $("div.extra > i.ps-3", element).text().trim();
            let title = $("span", urlElement)
                ?.text()
                .trim()
                .replace(": ", "");
            if (!title)
                title = undefined;
            const chapterText = $("b", urlElement)
                .text()
                .trim()
                .split(/Chapter|Episode|Ch\./);
            let volume = undefined;
            if (chapterText[0] && chapterText[0].includes("Vol")) {
                const volStr = chapterText[0]
                    .replace(/Volume|Vol\./, "")
                    .trim()
                    .match(/\d+/)?.[0];
                volume = Number(volStr);
                if (!volume)
                    volume = undefined;
            }
            // TODO: Better Special Chapter Handling
            let number = -1;
            const strNum = chapterText[1]?.match(/(\d+)/)?.[1];
            if (strNum) {
                number = Number(strNum) ?? -1;
                if (!number)
                    number = -1;
            }
            else {
                title = chapterText[0];
            }
            const providers = [];
            if (group) {
                const name = group.text().trim();
                const link = group.attr("href");
                if (name) {
                    providers.push({
                        id: name,
                        name,
                        links: [
                            {
                                type: daisuke_1.ProviderLinkType.WEBSITE,
                                url: (link && `https://bato.to${link}`) ?? "",
                            },
                        ],
                    });
                }
            }
            const flag = $(".item-flag").attr("data-lang");
            const language = flag ? `${flag}_${flag.toUpperCase()}` : "en_GB";
            const date = this.parseDate(time);
            chapters.push({
                chapterId,
                number,
                volume,
                date,
                contentId,
                index,
                providers,
                title,
                language,
            });
            index++;
        }
        return chapters;
    }
    parseDate(str) {
        const value = Number(str.split(" ")[0]);
        const current = (0, moment_1.default)();
        if (!value)
            return current.toDate();
        const low = str.toLowerCase();
        if (low.includes("sec"))
            return current.subtract(value, "seconds").toDate();
        else if (low.includes("min"))
            return current.subtract(value, "minutes").toDate();
        else if (low.includes("day"))
            return current.subtract(value, "days").toDate();
        else if (low.includes("week"))
            return current.subtract(value, "weeks").toDate();
        else if (low.includes("month"))
            return current.subtract(value, "months").toDate();
        else if (low.includes("year"))
            return current.subtract(value, "years").toDate();
        return current.toDate();
    }
    parsePages(html) {
        const $ = (0, cheerio_1.load)(html);
        const script = $("script:contains('const batoWord =')")?.html();
        if (!script)
            throw new Error("Could not find script with image data.");
        const imgHttpLisString = script
            .split("const imgHttpLis = ")
            .pop()
            ?.split(";")?.[0]
            .trim();
        if (!imgHttpLisString)
            throw new Error("Image List Not Found.");
        const imgHttpList = JSON.parse(imgHttpLisString);
        const batoWord = script
            .split("const batoWord = ")
            .pop()
            ?.split(";")?.[0]
            .replace(/"/g, "");
        const batoPass = script.split("const batoPass = ").pop()?.split(";")?.[0];
        if (!batoWord || !batoPass || !imgHttpList || imgHttpList.length == 0)
            throw new Error("Bad State");
        const evaluatedPass = eval(batoPass).toString();
        const imgAccListString = crypto_js_1.AES.decrypt(batoWord, evaluatedPass).toString(crypto_js_1.enc.Utf8);
        if (!imgAccListString)
            throw new Error("Invalid Acc List String");
        const imgAccList = JSON.parse(imgAccListString);
        if (!Array.isArray(imgAccList) || imgAccList.length == 0)
            throw new Error("Acc List Is Invalid");
        const urls = imgHttpList.map((v, i) => `${v}?${imgAccList[i]}`);
        return urls.map((url) => ({ url }));
    }
}
exports.Parser = Parser;

},{"./constants":1,"@suwatte/daisuke":7,"cheerio":"cheerio","crypto-js":"crypto-js","he":"he","moment":"moment"}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Source = void 0;
class Source {
}
exports.Source = Source;

},{}],6:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./Source"), exports);

},{"./Source":5}],7:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./classes"), exports);
__exportStar(require("./types"), exports);

},{"./classes":6,"./types":24}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],9:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"dup":8}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionStyle = void 0;
var CollectionStyle;
(function (CollectionStyle) {
    CollectionStyle[CollectionStyle["NORMAL"] = 0] = "NORMAL";
    CollectionStyle[CollectionStyle["INFO"] = 1] = "INFO";
    CollectionStyle[CollectionStyle["GALLERY"] = 2] = "GALLERY";
    CollectionStyle[CollectionStyle["UPDATE_LIST"] = 3] = "UPDATE_LIST";
})(CollectionStyle = exports.CollectionStyle || (exports.CollectionStyle = {}));

},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentType = exports.ReadingFlag = exports.ReadingMode = exports.Status = void 0;
// Enums
var Status;
(function (Status) {
    Status[Status["UNKNOWN"] = 0] = "UNKNOWN";
    Status[Status["ONGOING"] = 1] = "ONGOING";
    Status[Status["COMPLETED"] = 2] = "COMPLETED";
    Status[Status["CANCELLED"] = 3] = "CANCELLED";
    Status[Status["HIATUS"] = 4] = "HIATUS";
})(Status = exports.Status || (exports.Status = {}));
/**
 * The method in which the content can be read
 */
var ReadingMode;
(function (ReadingMode) {
    ReadingMode[ReadingMode["PAGED_MANGA"] = 0] = "PAGED_MANGA";
    ReadingMode[ReadingMode["PAGED_COMIC"] = 1] = "PAGED_COMIC";
    ReadingMode[ReadingMode["VERTICAL"] = 2] = "VERTICAL";
    ReadingMode[ReadingMode["VERTICAL_SEPARATED"] = 3] = "VERTICAL_SEPARATED";
    ReadingMode[ReadingMode["NOVEL"] = 4] = "NOVEL";
    ReadingMode[ReadingMode["WEB"] = 5] = "WEB";
})(ReadingMode = exports.ReadingMode || (exports.ReadingMode = {}));
var ReadingFlag;
(function (ReadingFlag) {
    ReadingFlag[ReadingFlag["READING"] = 0] = "READING";
    ReadingFlag[ReadingFlag["PLANNED"] = 1] = "PLANNED";
    ReadingFlag[ReadingFlag["COMPLETED"] = 2] = "COMPLETED";
    ReadingFlag[ReadingFlag["DROPPED"] = 3] = "DROPPED";
    ReadingFlag[ReadingFlag["REREADING"] = 4] = "REREADING";
    ReadingFlag[ReadingFlag["PAUSED"] = 5] = "PAUSED";
    ReadingFlag[ReadingFlag["UNKNOWN"] = 6] = "UNKNOWN";
})(ReadingFlag = exports.ReadingFlag || (exports.ReadingFlag = {}));
var ContentType;
(function (ContentType) {
    ContentType[ContentType["NOVEL"] = 0] = "NOVEL";
    ContentType[ContentType["MANGA"] = 1] = "MANGA";
    ContentType[ContentType["MANHUA"] = 2] = "MANHUA";
    ContentType[ContentType["MANHWA"] = 3] = "MANHWA";
    ContentType[ContentType["COMIC"] = 4] = "COMIC";
    ContentType[ContentType["UNKNOWN"] = 5] = "UNKNOWN";
})(ContentType = exports.ContentType || (exports.ContentType = {}));

},{}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterType = void 0;
var FilterType;
(function (FilterType) {
    FilterType[FilterType["TOGGLE"] = 0] = "TOGGLE";
    FilterType[FilterType["SELECT"] = 1] = "SELECT";
    FilterType[FilterType["MULTISELECT"] = 2] = "MULTISELECT";
    FilterType[FilterType["EXCLUDABLE_MULTISELECT"] = 3] = "EXCLUDABLE_MULTISELECT";
    FilterType[FilterType["TEXT"] = 4] = "TEXT";
    FilterType[FilterType["INFO"] = 5] = "INFO";
})(FilterType = exports.FilterType || (exports.FilterType = {}));

},{}],13:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"dup":8}],14:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"dup":8}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Types

},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderLinkType = void 0;
var ProviderLinkType;
(function (ProviderLinkType) {
    ProviderLinkType[ProviderLinkType["WEBSITE"] = 0] = "WEBSITE";
    ProviderLinkType[ProviderLinkType["TWITTER"] = 1] = "TWITTER";
    ProviderLinkType[ProviderLinkType["DISCORD"] = 2] = "DISCORD";
    ProviderLinkType[ProviderLinkType["PATREON"] = 3] = "PATREON";
})(ProviderLinkType = exports.ProviderLinkType || (exports.ProviderLinkType = {}));

},{}],17:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"dup":8}],18:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"dup":8}],19:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./Content"), exports);
__exportStar(require("./Highlight"), exports);
__exportStar(require("./Chapter"), exports);
__exportStar(require("./ChapterData"), exports);
__exportStar(require("./SearchRequest"), exports);
__exportStar(require("./PagedResult"), exports);
__exportStar(require("./TrackerInfo"), exports);
__exportStar(require("./Property"), exports);
__exportStar(require("./Collection"), exports);
__exportStar(require("./Provider"), exports);
__exportStar(require("./Filter"), exports);

},{"./Chapter":8,"./ChapterData":9,"./Collection":10,"./Content":11,"./Filter":12,"./Highlight":13,"./PagedResult":14,"./Property":15,"./Provider":16,"./SearchRequest":17,"./TrackerInfo":18}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthMethod = void 0;
var AuthMethod;
(function (AuthMethod) {
    AuthMethod[AuthMethod["USERNAME_PW"] = 0] = "USERNAME_PW";
    AuthMethod[AuthMethod["EMAIL_PW"] = 1] = "EMAIL_PW";
    AuthMethod[AuthMethod["WEB"] = 2] = "WEB";
    AuthMethod[AuthMethod["OAUTH"] = 3] = "OAUTH";
})(AuthMethod = exports.AuthMethod || (exports.AuthMethod = {}));

},{}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonPreference = exports.TextFieldPreference = exports.TogglePreference = exports.StepperPreference = exports.MultiSelectPreference = exports.SelectPreference = exports.PreferenceType = void 0;
var PreferenceType;
(function (PreferenceType) {
    PreferenceType[PreferenceType["SELECT"] = 0] = "SELECT";
    PreferenceType[PreferenceType["MULTISELECT"] = 1] = "MULTISELECT";
    PreferenceType[PreferenceType["STEPPER"] = 2] = "STEPPER";
    PreferenceType[PreferenceType["TOGGLE"] = 3] = "TOGGLE";
    PreferenceType[PreferenceType["TEXTFIELD"] = 4] = "TEXTFIELD";
    PreferenceType[PreferenceType["BUTTON"] = 5] = "BUTTON";
})(PreferenceType = exports.PreferenceType || (exports.PreferenceType = {}));
class Preference {
    constructor(key, type, label, value) {
        this.key = key;
        this.type = type;
        this.label = label;
        this.value = value;
    }
}
class SelectPreference extends Preference {
    constructor({ key, label, options, value }) {
        super(key, PreferenceType.SELECT, label, value);
        this.options = options;
    }
}
exports.SelectPreference = SelectPreference;
class MultiSelectPreference extends Preference {
    constructor({ key, label, options, value, maxSelectionCount, minSelectionCount, }) {
        super(key, PreferenceType.MULTISELECT, label, value);
        this.options = options;
        this.maxSelectionCount = maxSelectionCount;
        this.minSelectionCount = minSelectionCount;
    }
}
exports.MultiSelectPreference = MultiSelectPreference;
class StepperPreference extends Preference {
    constructor({ key, value, label, minValue, maxValue, }) {
        super(key, PreferenceType.STEPPER, label, value);
        this.maxValue = maxValue;
        this.minValue = minValue;
    }
}
exports.StepperPreference = StepperPreference;
class TogglePreference extends Preference {
    constructor({ key, label, value }) {
        super(key, PreferenceType.TOGGLE, label, value);
    }
}
exports.TogglePreference = TogglePreference;
class TextFieldPreference extends Preference {
    constructor({ key, label, value }) {
        super(key, PreferenceType.TEXTFIELD, label, value);
    }
}
exports.TextFieldPreference = TextFieldPreference;
class ButtonPreference extends Preference {
    constructor({ key, label, action, systemImage, isDestructive, }) {
        super(key, PreferenceType.BUTTON, label, {
            get: function () {
                throw new Error("Method Is Never Called");
            },
            set: function (value) {
                throw new Error("Method Is Never Called");
            },
        });
        this.action = action;
        this.systemImage = systemImage;
        this.isDestructive = isDestructive;
    }
}
exports.ButtonPreference = ButtonPreference;

},{}],22:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"dup":8}],23:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./Authentication"), exports);
__exportStar(require("./Preferences"), exports);
__exportStar(require("./RunnerInfo"), exports);

},{"./Authentication":20,"./Preferences":21,"./RunnerInfo":22}],24:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./core"), exports);
__exportStar(require("./content"), exports);
__exportStar(require("./networking"), exports);

},{"./content":19,"./core":23,"./networking":25}],25:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"dup":8}]},{},[3])(3)
});
