(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.STTPackage = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.properties = exports.EXCERPTS = void 0;
const daisuke_1 = require("@suwatte/daisuke");
const lodash_1 = require("lodash");
exports.EXCERPTS = [
    {
        id: "popular_today",
        title: "Popular Today",
        style: daisuke_1.CollectionStyle.GALLERY,
    },
    {
        id: "ymal",
        title: "You May Like",
        style: daisuke_1.CollectionStyle.NORMAL,
    },
    {
        id: "ongoing_updates",
        title: "Ongoing Updates",
        style: daisuke_1.CollectionStyle.INFO,
    },
    {
        id: "c_a_o",
        title: "Completed & One-shot",
        style: daisuke_1.CollectionStyle.NORMAL,
    },
    {
        id: "most_popular",
        title: "Most Popular Titles",
        style: daisuke_1.CollectionStyle.INFO,
    },
    {
        id: "latest",
        title: "Latest Updates",
        style: daisuke_1.CollectionStyle.UPDATE_LIST,
    },
];
const GENRE_LIST = [
    "Action/Adventure",
    "Anthology",
    "Anthropomorphic",
    "Biography",
    "Children's",
    "Comedy",
    "Crime",
    "Drama",
    "Fantasy",
    "Gore",
    "Graphic Novels",
    "Historical",
    "Holiday",
    "Horror",
    "Leading Ladies",
    "LGBTQ",
    "Literature",
    "Manga",
    "Martial Arts",
    "Mature",
    "Military",
    "Movies & TV",
    "Music",
    "Mystery",
    "Mythology",
    "Non-Fiction",
    "Original Series",
    "Political",
    "Post-Apocalyptic",
    "Pulp",
    "Religious",
    "Risque",
    "Robots, Cyborgs & Mecha",
    "Romance",
    "School Life",
    "Science Fiction",
    "Slice of Life",
    "Spy",
    "Steampunk",
    "Superhero",
    "Supernatural/Occult",
    "Suspense",
    "Vampires",
    "Video Games",
    "Web Comics",
    "Werewolves",
    "Western",
    "Zombies",
];
const PUBLISHER_LIST = [
    "Action Lab",
    "Aftershock",
    "AHOY",
    "American Mythology",
    "Aspen",
    "Avatar Press",
    "AWA Studios",
    "Black Mask",
    "BOOM! Studios",
    "Dark Horse",
    "DC",
    "Death Rattle",
    "Dynamite",
    "IDW",
    "Image",
    "Magnetic Press",
    "Marvel",
    "MAX",
    "Titan",
    "Ubiworkshop",
    "Valiant",
    "Vault",
    "Vertigo",
    "Wildstorm",
    "Zenescope",
];
const YEAR_LIST = (0, lodash_1.range)(1963, 2023);
const properties = () => {
    const properties = [];
    // Genres
    properties.push({
        id: "genre",
        label: "Genres",
        tags: GENRE_LIST.map((v) => ({
            id: v,
            label: v,
            adultContent: false,
        })),
    });
    // Publishers
    properties.push({
        id: "publisher",
        label: "Publishers",
        tags: PUBLISHER_LIST.map((v) => ({
            id: v,
            label: v,
            adultContent: false,
        })),
    });
    // Years
    properties.push({
        id: "year",
        label: "Years",
        tags: YEAR_LIST.map((v) => ({
            id: v.toString(),
            label: v.toString(),
            adultContent: false,
        })),
    });
    return properties;
};
exports.properties = properties;

},{"@suwatte/daisuke":6,"lodash":"lodash"}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Target = void 0;
const daisuke_1 = require("@suwatte/daisuke");
const he_1 = require("he");
const constants_1 = require("./constants");
const parser_1 = require("./parser");
class Target extends daisuke_1.Source {
    info = {
        id: "dev_comic_castle",
        name: "Comic Castle",
        nsfw: false,
        version: 1.3,
        website: "https://comicastle.org",
        supportedLanguages: ["en_US"],
        thumbnail: "comic_castle.png",
        minSupportedAppVersion: "5.0",
    };
    client = new NetworkClient();
    parser = new parser_1.Parser();
    async getContent(contentId) {
        const url = this.info.website + `/home/detail/${contentId}`;
        const response = await this.client.get(url);
        return {
            webUrl: url,
            ...this.parser.parseContent(response.data, contentId),
        };
    }
    async getChapters(contentId) {
        const url = this.info.website + `/home/detail/${contentId}`;
        const response = await this.client.get(url);
        return this.parser.parseChapters(response.data, contentId);
    }
    async getChapterData(contentId, chapterId) {
        const url = this.info.website + `/read/swiper/${chapterId}/${contentId}`;
        const response = await this.client.get(url);
        const pages = this.parser.parseChapterData(response.data);
        return {
            contentId,
            chapterId,
            pages,
        };
    }
    async getSearchResults(query) {
        const { page, query: text, filters } = query;
        let path = "/library/search/result";
        const config = {
            method: "POST",
            body: {
                search: "",
                submit: "Submit",
            },
            headers: {
                "content-type": "application/x-www-form-urlencoded",
            },
        };
        if (text) {
            // Title Search
            config.body.search = (0, he_1.encode)(text);
        }
        const filter = filters?.[0];
        if (filter && filter.included && filter.included.length != 0) {
            path = `/library/search/${filter.id}`;
            config.body.search = (0, he_1.encode)(filter.included?.[0] ?? filter.text ?? "");
        }
        if (query.page) {
            path += `/${page}`;
        }
        const response = await this.client.request({
            url: `${this.info.website}${path}`,
            ...config,
        });
        const { isLastPage, highlights: results } = this.parser.parseSearchResults(response.data);
        return { page: query.page ?? 1, isLastPage, results };
    }
    async getSourceTags() {
        return (0, constants_1.properties)();
    }
    async getSearchFilters() {
        const props = (0, constants_1.properties)();
        return [
            {
                id: "genre",
                title: "Genres",
                type: daisuke_1.FilterType.SELECT,
                options: props[0].tags,
            },
            {
                id: "publisher",
                title: "Publishers",
                type: daisuke_1.FilterType.SELECT,
                options: props[1].tags,
            },
            {
                id: "year",
                title: "Release Year",
                type: daisuke_1.FilterType.TEXT,
            },
        ];
    }
    async createExploreCollections() {
        return constants_1.EXCERPTS;
    }
    async resolveExploreCollection(excerpt) {
        await this.populateHomePage();
        const highlights = this.parser.parseHomePageSection(excerpt.id);
        return {
            ...excerpt,
            highlights,
        };
    }
    // * Helpers
    async populateHomePage() {
        if (this.parser.homepage)
            return;
        const response = await this.client.get(`${this.info.website}/home`);
        this.parser.homepage = response.data;
    }
}
exports.Target = Target;

},{"./constants":1,"./parser":3,"@suwatte/daisuke":6,"he":"he"}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
const daisuke_1 = require("@suwatte/daisuke");
const cheerio_1 = require("cheerio");
class Parser {
    homepage = "";
    parseHomePageSection(key, data) {
        const highlights = [];
        let selector = "";
        const $ = (0, cheerio_1.load)(data ?? this.homepage);
        let elements;
        switch (key) {
            case "popular_today":
                selector = `.card:contains("Popular Today") .row > div`;
                elements = $(selector);
                for (const element of elements) {
                    const id = this.parseIdFromLink($(" a:nth-of-type(1)", element).attr("href") ?? "");
                    if (!id)
                        continue;
                    const title = $("h6", element).text();
                    const cover = $("img", element).attr("data-src");
                    if (!title || !cover)
                        continue;
                    highlights.push({ contentId: id, title, cover });
                }
                break;
            case "ymal":
                selector = `.card:contains("You may also like") .row > div`;
                elements = $(selector);
                for (const element of elements) {
                    const id = this.parseIdFromLink($(" a:nth-of-type(1)", element).attr("href") ?? "");
                    if (!id)
                        continue;
                    const title = $(".badge", element)
                        .attr("data-original-title")
                        ?.match(/<p class='text-bold-600 text-left'>(.*)</)?.[1];
                    const cover = $("img", element).attr("data-src");
                    if (!title || !cover)
                        continue;
                    highlights.push({ contentId: id, title, cover });
                }
                break;
            case "ongoing_updates":
                selector = `.card:contains("Ongoing updates") .row > div`;
                elements = $(selector);
                for (const element of elements) {
                    const id = this.parseIdFromLink($(" a:nth-of-type(1)", element).attr("href") ?? "");
                    if (!id)
                        continue;
                    const title = $(".badge", element)
                        .attr("data-original-title")
                        ?.match(/<p class='text-bold-600 text-left'>(.*)</)?.[1];
                    const cover = $("img", element).attr("data-src");
                    if (!title || !cover)
                        continue;
                    highlights.push({ contentId: id, title, cover });
                }
                break;
            case "c_a_o":
                selector = `.card:contains("Completed & One-shot") .card-body > div`;
                elements = $(selector);
                for (const element of elements) {
                    const id = this.parseIdFromLink($(" a:nth-of-type(1)", element).attr("href") ?? "");
                    if (!id)
                        continue;
                    const title = $(".media-body > p", element).first().text().trim();
                    const cover = $("img", element).attr("data-src");
                    if (!title || !cover)
                        continue;
                    highlights.push({ contentId: id, title, cover });
                }
                break;
            case "most_popular":
                selector = `.card:contains("Most Popular") .row > div`;
                elements = $(selector);
                for (const element of elements) {
                    const id = this.parseIdFromLink($(" a:nth-of-type(1)", element).attr("href") ?? "");
                    if (!id)
                        continue;
                    const title = $(".badge", element)
                        .attr("data-original-title")
                        ?.match(/<p class='text-bold-600 text-left'>(.*)</)?.[1];
                    const cover = $("img", element).attr("data-src");
                    if (!title || !cover)
                        continue;
                    highlights.push({ contentId: id, title, cover });
                }
                break;
            case "latest":
                selector = `.card:contains("Updates") .row > .col-xl-2`;
                elements = $(selector);
                for (const element of elements) {
                    const id = this.parseIdFromLink($(" a:nth-of-type(1)", element).attr("href") ?? "");
                    if (!id)
                        continue;
                    const title = $("p", element).first().text().trim();
                    const cover = $("img", element).attr("data-src");
                    if (!title || !cover)
                        continue;
                    highlights.push({ contentId: id, title, cover });
                }
                break;
        }
        return highlights;
    }
    parseIdFromLink(str) {
        return str.match(/detail\/(\d+)\//)?.[1];
    }
    // Content
    parseContent(html, id) {
        const $ = (0, cheerio_1.load)(html);
        const body = $("div.card-body > div.mb-2");
        const cover = $("img", body).attr("data-src");
        const summary = $("#comic-desc").text().trim();
        const title = $("h1", body).first().text().trim();
        if (!cover)
            throw new Error("cover not found.\nThis failing might indicate a further selector issue.");
        const status = this.parseStatus($("p span.mr-1 strong", body).text().trim());
        const views = $("p span.danger strong").text().trim();
        const properties = [];
        // Genres
        properties.push({ id: "tags", label: "Tags", tags: [] });
        for (const element of $("p:contains(Genre) ~ div button")) {
            const value = $(element).attr("value");
            if (!value)
                continue;
            properties[0].tags.push({
                id: value,
                label: $(element).text().trim(),
                adultContent: false,
            });
        }
        // Publisher
        const publisherElement = $("p:contains(Publisher) + div button", body);
        if (!publisherElement.attr("value"))
            throw new Error("Failed to parse publisher");
        properties.push({ id: "publisher", label: "Publisher", tags: [] });
        properties[1].tags.push({
            id: publisherElement.attr("value") ?? "",
            label: publisherElement.text().trim(),
            adultContent: false,
        });
        // Credits
        properties.push({ id: "creators", label: "Credits", tags: [] });
        // Writers
        for (const element of $("thead:contains(Writer) + tbody button")) {
            const value = $(element).attr("value");
            if (!value)
                continue;
            properties[1].tags.push({
                id: value,
                label: $(element).text().trim(),
                adultContent: false,
            });
        }
        // Artists
        for (const element of $("thead:contains(Artist) + tbody button")) {
            const value = $(element).attr("value");
            if (!value)
                continue;
            properties[1].tags.push({
                id: `artist:${value}`,
                label: $(element).text().trim(),
                adultContent: false,
            });
        }
        // Creators
        const creators = properties[1].tags.map((v) => v.label);
        const included = {
            id: "ymal",
            title: "You May Also Like",
            highlights: this.parseHomePageSection("ymal", html),
            style: daisuke_1.CollectionStyle.NORMAL,
        };
        return {
            contentId: id,
            title,
            cover,
            summary,
            status,
            properties,
            creators,
            stats: {
                views: Number(views) ?? 1,
            },
            includedCollections: [included],
            chapters: this.parseChapters(html, id),
        };
    }
    parseStatus(str) {
        switch (str.toLowerCase()) {
            case "completed":
                return daisuke_1.Status.COMPLETED;
            case "ongoing":
                return daisuke_1.Status.ONGOING;
        }
        return daisuke_1.Status.UNKNOWN;
    }
    // Chapters
    parseChapters(html, contentId) {
        const $ = (0, cheerio_1.load)(html);
        const selector = "div.card-body > .table-responsive tr a";
        const elements = $(selector).toArray().reverse(); // Reverse For simplicity
        const chapters = [];
        let idx = 0;
        for (const element of elements) {
            const title = $(element).text().trim();
            const url = $(element).attr("href");
            if (!title || !url)
                throw new Error("Chapter Element Cannot be parsed");
            const [, chapterId] = url.match(/pbp\/(\d+)\/(\d+)\/\/(\d+)/) ?? [];
            const [, numberStr] = title.match(/(\d+)/) || [];
            const number = Number(numberStr);
            if (!chapterId || Number.isNaN(number))
                throw new Error("Chapter Element Cannot be parsed");
            chapters.push({
                index: idx,
                chapterId,
                contentId,
                title,
                number,
                date: new Date(),
                language: "en_US",
            });
            idx++;
        }
        return chapters;
    }
    // Chapter Data
    parseChapterData(html) {
        const $ = (0, cheerio_1.load)(html);
        const elements = $(".swiper-wrapper .swiper-slide img").toArray();
        const urls = elements
            .map((v) => $(v).attr("src")?.trim())
            .filter((a) => a)
            .map((url) => ({ url }));
        return urls;
    }
    parseSearchResults(html) {
        const $ = (0, cheerio_1.load)(html);
        const items = $("div.shadow-sm").toArray();
        const highlights = [];
        for (const item of items) {
            const title = $("p", item).text().trim();
            const cover = $("img", item).attr("data-src");
            const link = $("a", item).attr("href");
            if (!link)
                continue;
            const contentId = this.parseIdFromLink(link);
            if (!contentId || !cover)
                continue;
            highlights.push({
                title,
                cover,
                contentId,
            });
        }
        const isLastPage = $("li.page-item.next a").length == 0;
        return { isLastPage, highlights };
    }
}
exports.Parser = Parser;

},{"@suwatte/daisuke":6,"cheerio":"cheerio"}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Source = void 0;
class Source {
}
exports.Source = Source;

},{}],5:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./Source"), exports);

},{"./Source":4}],6:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./classes"), exports);
__exportStar(require("./types"), exports);

},{"./classes":5,"./types":23}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],8:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionStyle = void 0;
var CollectionStyle;
(function (CollectionStyle) {
    CollectionStyle[CollectionStyle["NORMAL"] = 0] = "NORMAL";
    CollectionStyle[CollectionStyle["INFO"] = 1] = "INFO";
    CollectionStyle[CollectionStyle["GALLERY"] = 2] = "GALLERY";
    CollectionStyle[CollectionStyle["UPDATE_LIST"] = 3] = "UPDATE_LIST";
})(CollectionStyle = exports.CollectionStyle || (exports.CollectionStyle = {}));

},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentType = exports.ReadingFlag = exports.ReadingMode = exports.Status = void 0;
// Enums
var Status;
(function (Status) {
    Status[Status["UNKNOWN"] = 0] = "UNKNOWN";
    Status[Status["ONGOING"] = 1] = "ONGOING";
    Status[Status["COMPLETED"] = 2] = "COMPLETED";
    Status[Status["CANCELLED"] = 3] = "CANCELLED";
    Status[Status["HIATUS"] = 4] = "HIATUS";
})(Status = exports.Status || (exports.Status = {}));
/**
 * The method in which the content can be read
 */
var ReadingMode;
(function (ReadingMode) {
    ReadingMode[ReadingMode["PAGED_MANGA"] = 0] = "PAGED_MANGA";
    ReadingMode[ReadingMode["PAGED_COMIC"] = 1] = "PAGED_COMIC";
    ReadingMode[ReadingMode["VERTICAL"] = 2] = "VERTICAL";
    ReadingMode[ReadingMode["VERTICAL_SEPARATED"] = 3] = "VERTICAL_SEPARATED";
    ReadingMode[ReadingMode["NOVEL"] = 4] = "NOVEL";
    ReadingMode[ReadingMode["WEB"] = 5] = "WEB";
})(ReadingMode = exports.ReadingMode || (exports.ReadingMode = {}));
var ReadingFlag;
(function (ReadingFlag) {
    ReadingFlag[ReadingFlag["READING"] = 0] = "READING";
    ReadingFlag[ReadingFlag["PLANNED"] = 1] = "PLANNED";
    ReadingFlag[ReadingFlag["COMPLETED"] = 2] = "COMPLETED";
    ReadingFlag[ReadingFlag["DROPPED"] = 3] = "DROPPED";
    ReadingFlag[ReadingFlag["REREADING"] = 4] = "REREADING";
    ReadingFlag[ReadingFlag["PAUSED"] = 5] = "PAUSED";
    ReadingFlag[ReadingFlag["UNKNOWN"] = 6] = "UNKNOWN";
})(ReadingFlag = exports.ReadingFlag || (exports.ReadingFlag = {}));
var ContentType;
(function (ContentType) {
    ContentType[ContentType["NOVEL"] = 0] = "NOVEL";
    ContentType[ContentType["MANGA"] = 1] = "MANGA";
    ContentType[ContentType["MANHUA"] = 2] = "MANHUA";
    ContentType[ContentType["MANHWA"] = 3] = "MANHWA";
    ContentType[ContentType["COMIC"] = 4] = "COMIC";
    ContentType[ContentType["UNKNOWN"] = 5] = "UNKNOWN";
})(ContentType = exports.ContentType || (exports.ContentType = {}));

},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterType = void 0;
var FilterType;
(function (FilterType) {
    FilterType[FilterType["TOGGLE"] = 0] = "TOGGLE";
    FilterType[FilterType["SELECT"] = 1] = "SELECT";
    FilterType[FilterType["MULTISELECT"] = 2] = "MULTISELECT";
    FilterType[FilterType["EXCLUDABLE_MULTISELECT"] = 3] = "EXCLUDABLE_MULTISELECT";
    FilterType[FilterType["TEXT"] = 4] = "TEXT";
    FilterType[FilterType["INFO"] = 5] = "INFO";
})(FilterType = exports.FilterType || (exports.FilterType = {}));

},{}],12:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],13:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Types

},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderLinkType = void 0;
var ProviderLinkType;
(function (ProviderLinkType) {
    ProviderLinkType[ProviderLinkType["WEBSITE"] = 0] = "WEBSITE";
    ProviderLinkType[ProviderLinkType["TWITTER"] = 1] = "TWITTER";
    ProviderLinkType[ProviderLinkType["DISCORD"] = 2] = "DISCORD";
    ProviderLinkType[ProviderLinkType["PATREON"] = 3] = "PATREON";
})(ProviderLinkType = exports.ProviderLinkType || (exports.ProviderLinkType = {}));

},{}],16:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],17:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],18:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./Content"), exports);
__exportStar(require("./Highlight"), exports);
__exportStar(require("./Chapter"), exports);
__exportStar(require("./ChapterData"), exports);
__exportStar(require("./SearchRequest"), exports);
__exportStar(require("./PagedResult"), exports);
__exportStar(require("./TrackerInfo"), exports);
__exportStar(require("./Property"), exports);
__exportStar(require("./Collection"), exports);
__exportStar(require("./Provider"), exports);
__exportStar(require("./Filter"), exports);

},{"./Chapter":7,"./ChapterData":8,"./Collection":9,"./Content":10,"./Filter":11,"./Highlight":12,"./PagedResult":13,"./Property":14,"./Provider":15,"./SearchRequest":16,"./TrackerInfo":17}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthMethod = void 0;
var AuthMethod;
(function (AuthMethod) {
    AuthMethod[AuthMethod["USERNAME_PW"] = 0] = "USERNAME_PW";
    AuthMethod[AuthMethod["EMAIL_PW"] = 1] = "EMAIL_PW";
    AuthMethod[AuthMethod["WEB"] = 2] = "WEB";
    AuthMethod[AuthMethod["OAUTH"] = 3] = "OAUTH";
})(AuthMethod = exports.AuthMethod || (exports.AuthMethod = {}));

},{}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonPreference = exports.TextFieldPreference = exports.TogglePreference = exports.StepperPreference = exports.MultiSelectPreference = exports.SelectPreference = exports.PreferenceType = void 0;
var PreferenceType;
(function (PreferenceType) {
    PreferenceType[PreferenceType["SELECT"] = 0] = "SELECT";
    PreferenceType[PreferenceType["MULTISELECT"] = 1] = "MULTISELECT";
    PreferenceType[PreferenceType["STEPPER"] = 2] = "STEPPER";
    PreferenceType[PreferenceType["TOGGLE"] = 3] = "TOGGLE";
    PreferenceType[PreferenceType["TEXTFIELD"] = 4] = "TEXTFIELD";
    PreferenceType[PreferenceType["BUTTON"] = 5] = "BUTTON";
})(PreferenceType = exports.PreferenceType || (exports.PreferenceType = {}));
class Preference {
    constructor(key, type, label, value) {
        this.key = key;
        this.type = type;
        this.label = label;
        this.value = value;
    }
}
class SelectPreference extends Preference {
    constructor({ key, label, options, value }) {
        super(key, PreferenceType.SELECT, label, value);
        this.options = options;
    }
}
exports.SelectPreference = SelectPreference;
class MultiSelectPreference extends Preference {
    constructor({ key, label, options, value, maxSelectionCount, minSelectionCount, }) {
        super(key, PreferenceType.MULTISELECT, label, value);
        this.options = options;
        this.maxSelectionCount = maxSelectionCount;
        this.minSelectionCount = minSelectionCount;
    }
}
exports.MultiSelectPreference = MultiSelectPreference;
class StepperPreference extends Preference {
    constructor({ key, value, label, minValue, maxValue, }) {
        super(key, PreferenceType.STEPPER, label, value);
        this.maxValue = maxValue;
        this.minValue = minValue;
    }
}
exports.StepperPreference = StepperPreference;
class TogglePreference extends Preference {
    constructor({ key, label, value }) {
        super(key, PreferenceType.TOGGLE, label, value);
    }
}
exports.TogglePreference = TogglePreference;
class TextFieldPreference extends Preference {
    constructor({ key, label, value }) {
        super(key, PreferenceType.TEXTFIELD, label, value);
    }
}
exports.TextFieldPreference = TextFieldPreference;
class ButtonPreference extends Preference {
    constructor({ key, label, action, systemImage, isDestructive, }) {
        super(key, PreferenceType.BUTTON, label, {
            get: function () {
                throw new Error("Method Is Never Called");
            },
            set: function (value) {
                throw new Error("Method Is Never Called");
            },
        });
        this.action = action;
        this.systemImage = systemImage;
        this.isDestructive = isDestructive;
    }
}
exports.ButtonPreference = ButtonPreference;

},{}],21:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],22:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./Authentication"), exports);
__exportStar(require("./Preferences"), exports);
__exportStar(require("./RunnerInfo"), exports);

},{"./Authentication":19,"./Preferences":20,"./RunnerInfo":21}],23:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./core"), exports);
__exportStar(require("./content"), exports);
__exportStar(require("./networking"), exports);

},{"./content":18,"./core":22,"./networking":24}],24:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}]},{},[2])(2)
});
