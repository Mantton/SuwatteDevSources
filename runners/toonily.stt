(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.STTPackage = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.YEAR_DATE_LIST = exports.MONTH_DATE_LIST = exports.WEEK_DATE_LIST = exports.SECONDS_DATE_LIST = exports.MINUTE_DATE_LIST = exports.HOUR_DATE_LIST = exports.DAY_DATE_LIST = exports.CANCELLED_STATUS_LIST = exports.HIATUS_STATUS_LIST = exports.ONGOING_STATUS_LIST = exports.COMPLETED_STATUS_LIST = exports.TAG_PREFIX = exports.DEFAULT_CONTEXT = exports.EXPLORE_SECTIONS = exports.AJAX_DIRECTORY = void 0;
const daisuke_1 = require("@suwatte/daisuke");
var AJAX_DIRECTORY;
(function (AJAX_DIRECTORY) {
    AJAX_DIRECTORY["LATEST"] = "latest";
    AJAX_DIRECTORY["NAME"] = "alphabet";
    AJAX_DIRECTORY["TRENDING_WEEKLY"] = "trending_weekly";
    AJAX_DIRECTORY["TRENDING_DAILY"] = "trending_daily";
    AJAX_DIRECTORY["TRENDING_MONTHLY"] = "trending_monthly";
    AJAX_DIRECTORY["POPULAR_AT"] = "popular_allTime";
    AJAX_DIRECTORY["COMPLETED"] = "completed";
    AJAX_DIRECTORY["TOP_RATED"] = "rating";
    AJAX_DIRECTORY["NEW"] = "new";
})(AJAX_DIRECTORY = exports.AJAX_DIRECTORY || (exports.AJAX_DIRECTORY = {}));
exports.EXPLORE_SECTIONS = [
    {
        id: AJAX_DIRECTORY.POPULAR_AT,
        title: "Popular Titles",
        subtitle: `The "Must Reads"`,
        style: daisuke_1.CollectionStyle.INFO,
    },
    {
        id: AJAX_DIRECTORY.TRENDING_DAILY,
        title: "Trending Daily",
        subtitle: `What we're "reading"`,
        style: daisuke_1.CollectionStyle.NORMAL,
    },
    {
        id: AJAX_DIRECTORY.NEW,
        title: "Recently Added Series",
        subtitle: `Fresh from the bakery, discover new stories`,
        style: daisuke_1.CollectionStyle.NORMAL,
    },
    {
        id: AJAX_DIRECTORY.TRENDING_WEEKLY,
        title: "Trending Weekly",
        subtitle: `Top Reads from this past week.`,
        style: daisuke_1.CollectionStyle.NORMAL,
    },
    {
        id: AJAX_DIRECTORY.TOP_RATED,
        title: "Top Rated Titles",
        subtitle: `Guaranteed Bangers 🔥`,
        style: daisuke_1.CollectionStyle.NORMAL,
    },
    {
        id: AJAX_DIRECTORY.TRENDING_MONTHLY,
        title: "Trending Monthly",
        subtitle: `Top Reads from this past month.`,
        style: daisuke_1.CollectionStyle.NORMAL,
    },
    {
        id: AJAX_DIRECTORY.COMPLETED,
        title: "Completed Titles",
        subtitle: `Perfect for binging.`,
        style: daisuke_1.CollectionStyle.NORMAL,
    },
    {
        id: AJAX_DIRECTORY.LATEST,
        title: "Latest Updates",
        style: daisuke_1.CollectionStyle.UPDATE_LIST,
    },
];
exports.DEFAULT_CONTEXT = {
    baseUrl: "",
    contentPath: "manga",
    searchPath: "page",
    searchSelector: "div.c-tabs-item__content",
    imageSelector: "div.page-break > img",
    chapterUseAJAX: false,
    useLoadMoreSearch: true,
    filterNonMangaItems: true,
    showOnlyManga: true,
    titleSelector: "div.post-title h3, div.post-title h1",
    authorSelector: "div.author-content > a",
    artistSelector: "div.artist-content > a",
    statusSelector: "div.summary-content",
    summarySelector: "div.description-summary div.summary__content, div.summary_content div.post-content_item > h5 + div, div.summary_content div.manga-excerpt",
    thumbnailSelector: "div.summary_image img",
    genreSelector: "div.genres-content > a",
    tagSelector: "div.tags-content a",
    typeSelector: ".post-content_item:contains(Type) .summary-content",
    alternativeTitlesSelector: ".post-content_item:contains(Alt) .summary-content",
    forceAdult: false,
    adultTags: ["mature"],
    chapterSelector: "li.wp-manga-chapter",
    chapterDateSelector: "span.chapter-release-date",
};
exports.TAG_PREFIX = {
    author: "author",
    artist: "artist",
    hashtag: "hashtag",
};
exports.COMPLETED_STATUS_LIST = [
    "Completed",
    "Completo",
    "Concluído",
    "Concluido",
    "Terminé",
    "Hoàn Thành",
    "مكتملة",
    "مكتمل",
];
exports.ONGOING_STATUS_LIST = [
    "OnGoing",
    "Продолжается",
    "Updating",
    "Em Lançamento",
    "Em lançamento",
    "Em andamento",
    "Em Andamento",
    "En cours",
    "Ativo",
    "Lançando",
    "Đang Tiến Hành",
    "Devam Ediyor",
    "Devam ediyor",
    "In Corso",
    "In Arrivo",
    "مستمرة",
    "مستمر",
    "En Curso",
];
exports.HIATUS_STATUS_LIST = ["On Hold"];
exports.CANCELLED_STATUS_LIST = ["Canceled"];
exports.DAY_DATE_LIST = [
    "hari",
    "gün",
    "jour",
    "día",
    "dia",
    "day",
    "วัน",
    "ngày",
    "giorni",
    "أيام",
];
exports.HOUR_DATE_LIST = [
    "jam",
    "saat",
    "heure",
    "hora",
    "hour",
    "ชั่วโมง",
    "giờ",
    "ore",
    "ساعة",
];
exports.MINUTE_DATE_LIST = [
    "menit",
    "dakika",
    "min",
    "minute",
    "minuto",
    "นาที",
    "دقائق",
];
exports.SECONDS_DATE_LIST = ["detik", "segundo", "second", "วินาที"];
exports.WEEK_DATE_LIST = ["week"];
exports.MONTH_DATE_LIST = ["month"];
exports.YEAR_DATE_LIST = ["year"];

},{"@suwatte/daisuke":9}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Controller = void 0;
const lodash_1 = require("lodash");
const constants_1 = require("./constants");
const parser_1 = require("./parser");
const utils_1 = require("./utils");
class Controller {
    context;
    client = new NetworkClient();
    parser = new parser_1.Parser();
    constructor(ctx) {
        this.context = ctx;
    }
    // Resolve Explore Collection
    async getCollection(excerpt) {
        const request = (0, utils_1.AJAXDirectoryRequest)(this.context, {
            sort: { id: excerpt.id, label: "" },
        });
        const response = await this.client.request(request);
        const highlights = this.parser.AJAXResponse(this.context, response.data);
        return { ...excerpt, highlights };
    }
    // Get Content
    async getContent(id) {
        const response = await this.client.get(`${this.context.baseUrl}/${this.context.contentPath}/${id}/`);
        return this.parser.content(this.context, response.data, id);
    }
    // Get Chapters
    async getChapters(id) {
        const response = await this.client.get(`${this.context.baseUrl}/${this.context.contentPath}/${id}/`);
        return this.parser.chapters(this.context, response.data, id);
    }
    // Get Chapter Data
    async getChapterData(contentId, chapterId) {
        const response = await this.client.get(`${this.context.baseUrl}/${this.context.contentPath}/${contentId}/${chapterId}`);
        return this.parser.chapterData(this.context, contentId, chapterId, response.data);
    }
    async getTags() {
        // parseGenres;
        const response = await this.client.get(`${this.context.baseUrl}/?s=genre&post_type=wp-manga`);
        const tags = this.parser.genres(this.context, response.data);
        return {
            id: "main",
            label: "Genres",
            tags,
        };
    }
    async getExploreTags() {
        const tags = (await this.getTags()).tags;
        return (0, lodash_1.sampleSize)(tags, 7);
    }
    async getFilters() {
        const main = {
            id: "main",
            property: await this.getTags(),
            canExclude: false,
        };
        const adult = {
            id: "adult",
            property: {
                id: "adult",
                label: "Adults",
                tags: [
                    {
                        id: "wp_adult|all",
                        label: "All",
                        adultContent: true,
                    },
                    {
                        id: "wp_adult|hidden",
                        label: "Mature Hidden",
                        adultContent: false,
                    },
                    {
                        id: "wp_adult|only",
                        label: "Mature Only",
                        adultContent: true,
                    },
                ],
            },
            canExclude: false,
        };
        return [main, adult];
    }
    // Search
    async handleSearch(request) {
        const loadMore = this.context.useLoadMoreSearch;
        return loadMore
            ? this.searchWithLoadMore(request)
            : this.searchWithQueryParams(request);
    }
    async searchWithQueryParams(request) {
        const base = `${this.context.baseUrl}/page/${request.page ?? 1}/`;
        const tags = request.includedTags?.filter((v) => !v.includes("|"));
        const adult = request.includedTags
            ?.filter((v) => v.includes("wp_adult|"))
            .map((v) => v.split("|").pop() ?? "")
            .filter((v) => v)?.[0];
        const params = {
            s: request.query,
            post_type: "wp-manga",
            adult: adult ? (adult == "hidden" ? "0" : "1") : "",
        };
        if (tags && tags.length > 0) {
            params["genres[]"] = tags;
        }
        const response = await this.client.get(base, {
            params,
        });
        const data = this.parser.searchResponse(this.context, response.data, request.page ?? 1);
        return data;
    }
    async searchWithLoadMore(request) {
        const net = (0, utils_1.AJAXDirectoryRequest)(this.context, request, true);
        const response = await this.client.request(net);
        const highlights = this.parser.AJAXResponse(this.context, response.data);
        return {
            results: highlights,
            isLastPage: highlights.length <= 18,
            page: request.page ?? 1,
        };
    }
    getSorters() {
        if (this.context.useLoadMoreSearch) {
            return [
                {
                    label: "Popularity",
                    id: constants_1.AJAX_DIRECTORY.POPULAR_AT,
                },
                {
                    label: "Top Monthly",
                    id: constants_1.AJAX_DIRECTORY.TRENDING_MONTHLY,
                },
                {
                    label: "Top Daily",
                    id: constants_1.AJAX_DIRECTORY.TRENDING_DAILY,
                },
                {
                    label: "Rating",
                    id: constants_1.AJAX_DIRECTORY.TOP_RATED,
                },
                {
                    label: "New",
                    id: constants_1.AJAX_DIRECTORY.NEW,
                },
                {
                    label: "Name",
                    id: constants_1.AJAX_DIRECTORY.NAME,
                },
            ];
        }
        return [
            {
                label: "Views",
                id: "views",
            },
            {
                label: "Rating",
                id: "rating",
            },
            {
                label: "Trending",
                id: "trending",
            },
            {
                label: "Latest",
                id: "latest",
            },
            {
                label: "New",
                id: "new-manga",
            },
            {
                label: "Name",
                id: "alphabet",
            },
        ];
    }
}
exports.Controller = Controller;

},{"./constants":1,"./parser":4,"./utils":5,"lodash":"lodash"}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Test = exports.MadaraTemplate = void 0;
const daisuke_1 = require("@suwatte/daisuke");
const constants_1 = require("./constants");
const controller_1 = require("./controller");
class MadaraTemplate extends daisuke_1.Source {
    context;
    controller;
    constructor(ctx) {
        super();
        this.context = ctx;
        this.controller = new controller_1.Controller(ctx);
    }
    async willRequestImage(request) {
        request.headers = {
            ...request.headers,
            Referer: this.context.baseUrl + "/",
        };
        return request;
    }
    //
    async getContent(contentId) {
        return this.controller.getContent(contentId);
    }
    //
    getChapters(contentId) {
        return this.controller.getChapters(contentId);
    }
    //
    getChapterData(contentId, chapterId) {
        return this.controller.getChapterData(contentId, chapterId);
    }
    //
    getSearchFilters() {
        return this.controller.getFilters();
    }
    //
    async getSearchSorters() {
        return this.controller.getSorters();
    }
    //
    async getSearchResults(query) {
        return this.controller.handleSearch(query);
    }
    //
    async getSourceTags() {
        const main = await this.controller.getTags();
        return [main];
    }
    //
    getExplorePageTags() {
        return this.controller.getExploreTags();
    }
    //
    async createExploreCollections() {
        return constants_1.EXPLORE_SECTIONS;
    }
    //
    async resolveExploreCollection(excerpt) {
        return this.controller.getCollection(excerpt);
    }
}
exports.MadaraTemplate = MadaraTemplate;
class Test extends MadaraTemplate {
    info = {
        id: "com.toonily",
        name: "Toonily",
        thumbnail: "toonily.png",
        version: 1.0,
        hasExplorePage: true,
        primarilyAdultContent: true,
        website: "https://toonily.com",
        supportedLanguages: ["GB"],
    };
    context = {
        ...constants_1.DEFAULT_CONTEXT,
        baseUrl: this.info.website,
    };
}
exports.Test = Test;

},{"./constants":1,"./controller":2,"@suwatte/daisuke":9}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
const daisuke_1 = require("@suwatte/daisuke");
const cheerio_1 = require("cheerio");
const lodash_1 = require("lodash");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
class Parser {
    AJAXResponse(ctx, html) {
        const highlights = [];
        const $ = (0, cheerio_1.load)(html);
        for (const element of $(".page-item-detail")) {
            const title = $("a", $("h3.h5", element)).text();
            const id = $("a", $("h3.h5", element))
                .attr("href")
                ?.replace(`${ctx.baseUrl}/${ctx.contentPath}/`, "")
                .replace(/\/$/, "");
            if (!title || !id) {
                continue;
            }
            const imageElement = $("img", element);
            const imageURL = (0, utils_1.imageFromElement)(imageElement);
            highlights.push({
                contentId: id,
                title,
                cover: imageURL,
            });
        }
        return highlights;
    }
    content(ctx, html, contentId) {
        const $ = (0, cheerio_1.load)(html);
        // Title
        const title = $(ctx.titleSelector).first()?.text().trim();
        if (!title)
            throw new Error("Title not found\nPotentially incorrect selectors");
        // Author
        const authors = $(ctx.authorSelector)
            .toArray()
            .map((node) => (0, utils_1.generateAnchorTag)($, node))
            .filter(utils_1.notUpdating)
            .map((tag) => ({
            id: `${constants_1.TAG_PREFIX.author}|tag.title.toLowerCase()`,
            label: tag.title,
            adultContent: false,
        }));
        // Artists
        const artists = $(ctx.artistSelector)
            .toArray()
            .map((node) => (0, utils_1.generateAnchorTag)($, node))
            .filter(utils_1.notUpdating)
            .map((tag) => ({
            id: `${constants_1.TAG_PREFIX.artist}|tag.title.toLowerCase()`,
            label: tag.title,
            adultContent: false,
        }));
        // Creators
        const creators = Array.from(new Set(authors.concat(artists).map((v) => v.label)));
        // Summary
        let summary = "";
        let summaryNode = $(ctx.summarySelector);
        if ($(summaryNode, "p").text().trim()) {
            summary = $(summaryNode, "p")
                .toArray()
                .map((v) => {
                const elem = $(v);
                return elem.text().replace("<br>", "\n");
            })
                .join("\n\n")
                .trim();
        }
        else {
            summary = $(ctx.summarySelector).text().trim();
        }
        // Cover
        const coverElem = $(ctx.thumbnailSelector).first();
        const cover = (0, utils_1.imageFromElement)(coverElem);
        // Status
        const statusString = $(ctx.statusSelector).last()?.text().trim() ?? "";
        const status = (0, utils_1.parseStatus)(statusString);
        // Genres
        const genres = $(ctx.genreSelector)
            .toArray()
            .map((node) => (0, utils_1.generateAnchorTag)($, node))
            .map((v) => ({
            id: v
                .link.split("/")
                .filter((v) => v)
                .pop() ?? "",
            label: v.title,
            adultContent: ctx.adultTags.includes(v.title.toLowerCase()),
        }))
            .filter((v) => v.id);
        const hashtags = $(ctx.tagSelector)
            .toArray()
            .map((node) => (0, utils_1.generateAnchorTag)($, node))
            .map((v) => ({
            id: `${constants_1.TAG_PREFIX.hashtag}${v
                .link.split("/")
                .filter((v) => v)
                .pop() ?? ""}`,
            label: v.title,
            adultContent: ctx.adultTags.includes(v.title.toLowerCase()),
        }))
            .filter((v) => v.id.replace(constants_1.TAG_PREFIX.hashtag, ""));
        const additionalTitles = $(ctx.alternativeTitlesSelector)
            .first()
            .text()
            .trim()
            .split(";")
            .map(lodash_1.trim);
        const adultContent = genres.some((v) => v.adultContent);
        const properties = [
            {
                id: "main",
                label: "Genres",
                tags: genres,
            },
            {
                id: "supporting",
                label: "Tags",
                tags: hashtags,
            },
            {
                id: "creators",
                label: "Credits",
                tags: [
                    ...authors.map((v) => ({ ...v, label: `Story By ${v.label}` })),
                    ...artists.map((v) => ({ ...v, label: `Art By ${v.label}` })),
                ],
            },
        ];
        const chapters = this.chapters(ctx, html, contentId);
        return {
            contentId,
            title,
            cover,
            summary: summary ? summary : undefined,
            creators,
            status,
            adultContent,
            properties,
            chapters,
            recommendedReadingMode: daisuke_1.ReadingMode.VERTICAL,
            additionalTitles: additionalTitles.length != 0 ? additionalTitles : undefined,
        };
    }
    chapters(ctx, html, contentId) {
        const $ = (0, cheerio_1.load)(html);
        let index = 0;
        const chapters = [];
        for (const node of $(ctx.chapterSelector).toArray()) {
            const elem = $(node);
            const id = $("a", elem)
                .first()
                .attr("href")
                ?.replace(`${ctx.baseUrl}/${ctx.contentPath}/${contentId}/`, "")
                .replace(/\/$/, "");
            if (!id)
                throw new Error("Failed to parse Chapter ID");
            const title = $("a", elem).first().text().trim();
            const numStr = id
                .match(/\D*(\d*\-?\d*)\D*$/)
                ?.pop()
                ?.replace(/-/g, ".");
            const number = Number(numStr);
            const dateStr = $(ctx.chapterDateSelector, elem).first().text().trim();
            const date = (0, utils_1.parseDate)(dateStr);
            chapters.push({
                index,
                contentId,
                chapterId: id,
                number,
                date,
                title,
                language: "GB",
            });
            index++;
        }
        return chapters;
    }
    chapterData(ctx, contentId, chapterId, html) {
        const $ = (0, cheerio_1.load)(html);
        const nodes = $(ctx.imageSelector).toArray();
        const pages = nodes
            .map((node) => (0, utils_1.imageFromElement)($(node)).trim())
            .map((url) => ({ url }));
        return {
            contentId,
            chapterId,
            pages,
        };
    }
    // Parse Genres
    genres(ctx, html) {
        const $ = (0, cheerio_1.load)(html);
        const nodes = $("div.checkbox", "div.checkbox-group").toArray();
        const tags = nodes
            .map((node) => {
            const label = $("label", node).text().trim();
            const id = $("input[type=checkbox]", node).attr("value")?.trim() ?? "";
            const adultContent = ctx.adultTags.includes(label.toLowerCase());
            return { label, id, adultContent };
        })
            .filter((v) => v.id);
        return tags;
    }
    searchResponse(ctx, html, page) {
        const $ = (0, cheerio_1.load)(html);
        const nodes = $(".page-item-detail").toArray();
        const highlights = nodes.map((node) => {
            const title = $("a", node).attr("title");
            const contentId = $("a", node)
                .attr("href")
                ?.replace(`${ctx.baseUrl}/${ctx.contentPath}/`, "")
                .replace(/\/$/, "");
            if (!title || !contentId)
                throw "Failed to Parse Search Result";
            const cover = (0, utils_1.imageFromElement)($("img", node));
            return {
                title,
                contentId,
                cover,
            };
        });
        return {
            results: highlights,
            page,
            isLastPage: highlights.length <= 18,
        };
    }
}
exports.Parser = Parser;

},{"./constants":1,"./utils":5,"@suwatte/daisuke":9,"cheerio":"cheerio","lodash":"lodash"}],5:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseRelativeDate = exports.parseDate = exports.parseStatus = exports.generateAnchorTag = exports.notUpdating = exports.imageFromElement = exports.AJAXDirectoryRequest = void 0;
const daisuke_1 = require("@suwatte/daisuke");
const moment_1 = __importDefault(require("moment"));
const constants_1 = require("./constants");
const AJAXDirectoryRequest = (ctx, request, searching = false) => {
    const body = generateAJAXRequest(ctx, request);
    if (!searching) {
        body["template"] = "madara-core/content/content-archive";
    }
    return {
        url: `${ctx.baseUrl}/wp-admin/admin-ajax.php`,
        method: "POST",
        headers: {
            "content-type": "application/x-www-form-urlencoded",
            referer: ctx.baseUrl + "/",
        },
        body,
    };
};
exports.AJAXDirectoryRequest = AJAXDirectoryRequest;
const generateAJAXRequest = (ctx, request) => {
    const body = {
        action: "madara_load_more",
        page: ((request.page ?? 1) - 1).toString(),
        template: "madara-core/content/content-search",
        "vars[paged]": "1",
        "vars[template]": "archive",
        "vars[sidebar]": "right",
        "vars[post_type]": "wp-manga",
        "vars[post_status]": "publish",
        "vars[manga_archives_item_layout]": "big_thumbnail",
        "vars[posts_per_page]": "30",
    };
    if (ctx.filterNonMangaItems && ctx.showOnlyManga) {
        body["vars[meta_query][0][key]"] = "_wp_manga_chapter_type";
        body["vars[meta_query][0][value]"] = "manga";
    }
    if (request.sort?.id) {
        switch (request.sort.id) {
            case "latest":
                body["vars[orderby]"] = "meta_value_num";
                body["vars[order]"] = "DESC";
                body["vars[meta_key]"] = "_latest_update";
                break;
            case "alphabet":
                body["vars[orderby]"] = "post_title";
                body["vars[order]"] = "ASC";
                break;
            case "rating":
                body["vars[orderby][query_average_reviews]"] = "DESC";
                body["vars[orderby][query_total_reviews]"] = "DESC";
                break;
            case "trending_daily":
                body["vars[orderby]"] = "meta_value_num";
                body["vars[meta_key]"] = "_wp_manga_day_views_value";
                body["vars[order]"] = "DESC";
                break;
            case "trending_weekly":
                body["vars[orderby]"] = "meta_value_num";
                body["vars[meta_key]"] = "_wp_manga_week_views_value";
                body["vars[order]"] = "DESC";
                break;
            case "trending_monthly":
                body["vars[orderby]"] = "meta_value_num";
                body["vars[meta_key]"] = "_wp_manga_month_views_value";
                body["vars[order]"] = "DESC";
                break;
            case "popular_allTime":
                body["vars[orderby]"] = "meta_value_num";
                body["vars[meta_key]"] = "_wp_manga_views";
                body["vars[order]"] = "DESC";
                break;
            case "new":
                body["vars[orderby]"] = "date";
                body["vars[order]"] = "DESC";
                break;
            case "completed":
                body["vars[orderby]"] = "meta_value_num";
                body["vars[meta_value]"] = "end";
                body["vars[meta_key]"] = "_wp_manga_status";
                break;
        }
    }
    if (request.query) {
        body["vars[s]"] = request.query;
    }
    return body;
};
const imageFromElement = (element) => {
    const url = element.attr("data-src") ??
        element.attr("data-lazy-src") ??
        element.attr("srcset")?.split(" ")?.[0] ??
        element.attr("src") ??
        element.attr("data-cfsrc") ??
        "https://aegaeon.mantton.com/ceres.jpeg";
    return url
        .replace("-110x150", "")
        .replace("-175x238", "")
        .replace("-193x278", "")
        .replace("-224x320", "")
        .replace("-350x476", "");
};
exports.imageFromElement = imageFromElement;
const notUpdating = (tag) => {
    const regex = /Updating|Atualizando/;
    return !!!tag.title.trim().match(regex);
};
exports.notUpdating = notUpdating;
const generateAnchorTag = ($, node) => {
    const elem = $(node);
    const link = elem.attr("href");
    const title = elem.text().trim();
    return { link, title };
};
exports.generateAnchorTag = generateAnchorTag;
const parseStatus = (str) => {
    if (constants_1.COMPLETED_STATUS_LIST.includes(str))
        return daisuke_1.Status.COMPLETED;
    if (constants_1.ONGOING_STATUS_LIST.includes(str))
        return daisuke_1.Status.ONGOING;
    if (constants_1.HIATUS_STATUS_LIST.includes(str))
        return daisuke_1.Status.HIATUS;
    if (constants_1.CANCELLED_STATUS_LIST.includes(str))
        return daisuke_1.Status.CANCELLED;
    return daisuke_1.Status.UNKNOWN;
};
exports.parseStatus = parseStatus;
const parseDate = (str) => {
    if (["just", "now", "up"].some((v) => str.trim().toLowerCase().includes(v)))
        return new Date();
    if (str.trim().toLowerCase() === "yesterday")
        return (0, moment_1.default)().subtract(1, "day").toDate();
    return (0, exports.parseRelativeDate)(str)?.toDate() ?? (0, moment_1.default)(str).toDate();
};
exports.parseDate = parseDate;
const parseRelativeDate = (str) => {
    const numStr = str.match(/(\d+)/)?.[1];
    if (!numStr || parseInt(numStr) === NaN) {
        throw new Error(`Date Parse Failure: ${str}`);
    }
    const number = parseInt(numStr);
    let now = (0, moment_1.default)();
    if (constants_1.DAY_DATE_LIST.some((v) => str.toLowerCase().includes(v)))
        return now.subtract(number, "days");
    if (constants_1.HOUR_DATE_LIST.some((v) => str.toLowerCase().includes(v)))
        return now.subtract(number, "hours");
    if (constants_1.MINUTE_DATE_LIST.some((v) => str.toLowerCase().includes(v)))
        return now.subtract(number, "minutes");
    if (constants_1.SECONDS_DATE_LIST.some((v) => str.toLowerCase().includes(v)))
        return now.subtract(number, "seconds");
    if (constants_1.WEEK_DATE_LIST.some((v) => str.toLowerCase().includes(v)))
        return now.subtract(number, "weeks");
    if (constants_1.MONTH_DATE_LIST.some((v) => str.toLowerCase().includes(v)))
        return now.subtract(number, "months");
    if (constants_1.YEAR_DATE_LIST.some((v) => str.toLowerCase().includes(v)))
        return now.subtract(number, "years");
};
exports.parseRelativeDate = parseRelativeDate;

},{"./constants":1,"@suwatte/daisuke":9,"moment":"moment"}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Target = void 0;
const daisuke_1 = require("@suwatte/daisuke");
const cheerio_1 = require("cheerio");
const madara_1 = require("../../multi/madara");
const constants_1 = require("../../multi/madara/constants");
const utils_1 = require("../../multi/madara/utils");
class Target extends madara_1.MadaraTemplate {
    info = {
        id: "com.toonily",
        name: "Toonily",
        thumbnail: "toonily.png",
        version: 1.1,
        hasExplorePage: true,
        primarilyAdultContent: true,
        website: "https://toonily.com",
        supportedLanguages: ["GB"],
        authMethod: daisuke_1.AuthMethod.WEB,
    };
    constructor() {
        super({
            ...constants_1.DEFAULT_CONTEXT,
            baseUrl: "https://toonily.com",
            contentPath: "webtoon",
            tagSelector: ".wp-manga-tags-list > a",
            filterNonMangaItems: false,
            chapterUseAJAX: true,
            searchSelector: "div.page-item-detail.manga",
            useLoadMoreSearch: true,
        });
    }
    async onSourceLoaded() {
        this.controller.client.requestInterceptHandler = async (req) => {
            return {
                ...req,
                headers: {
                    ...(req.headers ?? {}),
                    referer: this.context.baseUrl + "/",
                },
                cookies: [
                    {
                        name: "wpmanga-adault",
                        domain: ".toonily.com",
                        value: "1",
                    },
                    {
                        name: "toonily-mature",
                        domain: ".toonily.com",
                        value: "1",
                    },
                ],
            };
        };
    }
    async willRequestWebViewAuth() {
        return {
            url: this.info.website,
        };
    }
    async didReceiveWebAuthCookie(name) {
        return name.includes("wordpress_logged_in");
    }
    async getAuthenticatedUser() {
        const response = await this.controller.client.get("https://toonily.com/user-settings/?tab=account-settings");
        const $ = (0, cheerio_1.load)(response.data);
        const username = $("#form-account-settings > div > div:nth-child(2) > div:nth-child(2) > div > span").text();
        const avatar = (0, utils_1.imageFromElement)($(".c-user-avatar > img"));
        if (!username) {
            return null;
        }
        return {
            id: username,
            username,
            avatar,
        };
    }
}
exports.Target = Target;

},{"../../multi/madara":3,"../../multi/madara/constants":1,"../../multi/madara/utils":5,"@suwatte/daisuke":9,"cheerio":"cheerio"}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Source = void 0;
class Source {
}
exports.Source = Source;

},{}],8:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./Source"), exports);

},{"./Source":7}],9:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./classes"), exports);
__exportStar(require("./types"), exports);

},{"./classes":8,"./types":26}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],11:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionStyle = void 0;
var CollectionStyle;
(function (CollectionStyle) {
    CollectionStyle[CollectionStyle["NORMAL"] = 0] = "NORMAL";
    CollectionStyle[CollectionStyle["INFO"] = 1] = "INFO";
    CollectionStyle[CollectionStyle["GALLERY"] = 2] = "GALLERY";
    CollectionStyle[CollectionStyle["UPDATE_LIST"] = 3] = "UPDATE_LIST";
})(CollectionStyle = exports.CollectionStyle || (exports.CollectionStyle = {}));

},{}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentType = exports.ReadingFlag = exports.ReadingMode = exports.Status = void 0;
var Status;
(function (Status) {
    Status[Status["UNKNOWN"] = 0] = "UNKNOWN";
    Status[Status["ONGOING"] = 1] = "ONGOING";
    Status[Status["COMPLETED"] = 2] = "COMPLETED";
    Status[Status["CANCELLED"] = 3] = "CANCELLED";
    Status[Status["HIATUS"] = 4] = "HIATUS";
})(Status = exports.Status || (exports.Status = {}));
/**
 * The method in which the content can be read
 */
var ReadingMode;
(function (ReadingMode) {
    ReadingMode[ReadingMode["PAGED_MANGA"] = 0] = "PAGED_MANGA";
    ReadingMode[ReadingMode["PAGED_COMIC"] = 1] = "PAGED_COMIC";
    ReadingMode[ReadingMode["VERTICAL"] = 2] = "VERTICAL";
    ReadingMode[ReadingMode["VERTICAL_SEPARATED"] = 3] = "VERTICAL_SEPARATED";
    ReadingMode[ReadingMode["NOVEL"] = 4] = "NOVEL";
    ReadingMode[ReadingMode["WEB"] = 5] = "WEB";
})(ReadingMode = exports.ReadingMode || (exports.ReadingMode = {}));
var ReadingFlag;
(function (ReadingFlag) {
    ReadingFlag[ReadingFlag["READING"] = 0] = "READING";
    ReadingFlag[ReadingFlag["PLANNED"] = 1] = "PLANNED";
    ReadingFlag[ReadingFlag["COMPLETED"] = 2] = "COMPLETED";
    ReadingFlag[ReadingFlag["DROPPED"] = 3] = "DROPPED";
    ReadingFlag[ReadingFlag["REREADING"] = 4] = "REREADING";
    ReadingFlag[ReadingFlag["PAUSED"] = 5] = "PAUSED";
    ReadingFlag[ReadingFlag["UNKNOWN"] = 6] = "UNKNOWN";
})(ReadingFlag = exports.ReadingFlag || (exports.ReadingFlag = {}));
var ContentType;
(function (ContentType) {
    ContentType[ContentType["NOVEL"] = 0] = "NOVEL";
    ContentType[ContentType["MANGA"] = 1] = "MANGA";
    ContentType[ContentType["MANHUA"] = 2] = "MANHUA";
    ContentType[ContentType["MANHWA"] = 3] = "MANHWA";
    ContentType[ContentType["COMIC"] = 4] = "COMIC";
    ContentType[ContentType["UNKNOWN"] = 5] = "UNKNOWN";
})(ContentType = exports.ContentType || (exports.ContentType = {}));

},{}],14:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10}],15:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10}],16:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderLinkType = void 0;
var ProviderLinkType;
(function (ProviderLinkType) {
    ProviderLinkType[ProviderLinkType["WEBSITE"] = 0] = "WEBSITE";
    ProviderLinkType[ProviderLinkType["TWITTER"] = 1] = "TWITTER";
    ProviderLinkType[ProviderLinkType["DISCORD"] = 2] = "DISCORD";
    ProviderLinkType[ProviderLinkType["PATREON"] = 3] = "PATREON";
})(ProviderLinkType = exports.ProviderLinkType || (exports.ProviderLinkType = {}));

},{}],18:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10}],19:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10}],20:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./Content"), exports);
__exportStar(require("./Highlight"), exports);
__exportStar(require("./Chapter"), exports);
__exportStar(require("./ChapterData"), exports);
__exportStar(require("./SearchRequest"), exports);
__exportStar(require("./PagedResult"), exports);
__exportStar(require("./TrackerInfo"), exports);
__exportStar(require("./Property"), exports);
__exportStar(require("./Collection"), exports);
__exportStar(require("./Provider"), exports);

},{"./Chapter":10,"./ChapterData":11,"./Collection":12,"./Content":13,"./Highlight":14,"./PagedResult":15,"./Property":16,"./Provider":17,"./SearchRequest":18,"./TrackerInfo":19}],21:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthMethod = void 0;
var AuthMethod;
(function (AuthMethod) {
    AuthMethod[AuthMethod["USERNAME_PW"] = 0] = "USERNAME_PW";
    AuthMethod[AuthMethod["EMAIL_PW"] = 1] = "EMAIL_PW";
    AuthMethod[AuthMethod["WEB"] = 2] = "WEB";
    AuthMethod[AuthMethod["OAUTH"] = 3] = "OAUTH";
})(AuthMethod = exports.AuthMethod || (exports.AuthMethod = {}));

},{}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferenceType = void 0;
var PreferenceType;
(function (PreferenceType) {
    PreferenceType[PreferenceType["select"] = 0] = "select";
    PreferenceType[PreferenceType["multiSelect"] = 1] = "multiSelect";
    PreferenceType[PreferenceType["stepper"] = 2] = "stepper";
    PreferenceType[PreferenceType["toggle"] = 3] = "toggle";
    PreferenceType[PreferenceType["textfield"] = 4] = "textfield";
})(PreferenceType = exports.PreferenceType || (exports.PreferenceType = {}));

},{}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunnerType = void 0;
var RunnerType;
(function (RunnerType) {
    RunnerType[RunnerType["CONTENT_SOURCE"] = 0] = "CONTENT_SOURCE";
    RunnerType[RunnerType["SERVICE_INTERACTOR"] = 1] = "SERVICE_INTERACTOR";
})(RunnerType = exports.RunnerType || (exports.RunnerType = {}));

},{}],25:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./Authentication"), exports);
__exportStar(require("./Preferences"), exports);
__exportStar(require("./RunnerInfo"), exports);
__exportStar(require("./Actions"), exports);

},{"./Actions":21,"./Authentication":22,"./Preferences":23,"./RunnerInfo":24}],26:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./core"), exports);
__exportStar(require("./content"), exports);
__exportStar(require("./networking"), exports);

},{"./content":20,"./core":25,"./networking":29}],27:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10}],28:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10}],29:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./NetworkRequest"), exports);
__exportStar(require("./NetworkResponse"), exports);

},{"./NetworkRequest":27,"./NetworkResponse":28}]},{},[6])(6)
});
